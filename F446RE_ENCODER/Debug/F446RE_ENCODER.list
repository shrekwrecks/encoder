
F446RE_ENCODER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000467c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800484c  0800484c  0000584c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b8  080048b8  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080048b8  080048b8  000058b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048c0  080048c0  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c0  080048c0  000058c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048c4  080048c4  000058c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080048c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000006c  08004934  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08004934  00006280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7d4  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cae  00000000  00000000  00012870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00014520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000912  00000000  00000000  000150c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002231d  00000000  00000000  000159da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e538  00000000  00000000  00037cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdc07  00000000  00000000  0004622f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113e36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000384c  00000000  00000000  00113e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001176c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004834 	.word	0x08004834

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08004834 	.word	0x08004834

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <as5600_init>:
 * @retval              AS5600_ERROR_SUCCESS    If everything went well
 * @retval              AS5600_ERROR_RUNTIME_ERROR Module already initialized
 * @retval              AS5600_ERROR_BAD_PARAMETER Invalid transfer function pointer
 */
as5600_error_t as5600_init(pf_i2c_xfer_as5600_t const pf_transfer_func)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
        as5600_error_t result = AS5600_ERROR_SUCCESS;
 80005e4:	2300      	movs	r3, #0
 80005e6:	73fb      	strb	r3, [r7, #15]

        if (m_is_initialized) {
 80005e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <as5600_init+0x44>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d002      	beq.n	80005f6 <as5600_init+0x1a>
                result = AS5600_ERROR_RUNTIME_ERROR;
 80005f0:	2302      	movs	r3, #2
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	e004      	b.n	8000600 <as5600_init+0x24>
        } else if (NULL == pf_transfer_func) {
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d101      	bne.n	8000600 <as5600_init+0x24>
                result = AS5600_ERROR_BAD_PARAMETER;
 80005fc:	2301      	movs	r3, #1
 80005fe:	73fb      	strb	r3, [r7, #15]
        }

        if (AS5600_ERROR_SUCCESS == result) {
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d105      	bne.n	8000612 <as5600_init+0x36>
                m_as5600_xfer_func = pf_transfer_func;
 8000606:	4a07      	ldr	r2, [pc, #28]	@ (8000624 <as5600_init+0x48>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6013      	str	r3, [r2, #0]
                m_is_initialized = true;
 800060c:	4b04      	ldr	r3, [pc, #16]	@ (8000620 <as5600_init+0x44>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
        }

        return result;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	2000008c 	.word	0x2000008c
 8000624:	20000088 	.word	0x20000088

08000628 <as5600_get_angle>:
 * @retval          AS5600_ERROR_BAD_PARAMETER  Pointer invalid
 * @retval          *                           Any other errors returned by the
 *                                              sub-callees
 */
as5600_error_t as5600_get_angle(uint16_t * const p_angle)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
        as5600_register_t const reg = AS5600_REGISTER_ANGLE_H;
 8000630:	230e      	movs	r3, #14
 8000632:	73bb      	strb	r3, [r7, #14]
        as5600_error_t success = AS5600_ERROR_SUCCESS;
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]
        uint16_t buffer;

        if (NULL == p_angle) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d101      	bne.n	8000642 <as5600_get_angle+0x1a>
                success = AS5600_ERROR_BAD_PARAMETER;
 800063e:	2301      	movs	r3, #1
 8000640:	73fb      	strb	r3, [r7, #15]
        }

        if (AS5600_ERROR_SUCCESS == success) {
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d108      	bne.n	800065a <as5600_get_angle+0x32>
                success = as5600_read_16register(reg, &buffer);
 8000648:	f107 020c 	add.w	r2, r7, #12
 800064c:	7bbb      	ldrb	r3, [r7, #14]
 800064e:	4611      	mov	r1, r2
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f878 	bl	8000746 <as5600_read_16register>
 8000656:	4603      	mov	r3, r0
 8000658:	73fb      	strb	r3, [r7, #15]
        }


        if (AS5600_ERROR_SUCCESS == success) {
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d102      	bne.n	8000666 <as5600_get_angle+0x3e>
                *p_angle = buffer;
 8000660:	89ba      	ldrh	r2, [r7, #12]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	801a      	strh	r2, [r3, #0]
        }

        return success;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <as5600_get_status>:
 * @retval          AS5600_ERROR_BAD_PARAMETER  Pointer invalid
 * @retval          *                           Any other errors returned by the
 *                                              sub-callees
 */
as5600_error_t as5600_get_status(as5600_status_t * const p_status)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
        as5600_register_t const reg = AS5600_REGISTER_STATUS;
 8000678:	230b      	movs	r3, #11
 800067a:	733b      	strb	r3, [r7, #12]
        as5600_error_t success = AS5600_ERROR_SUCCESS;
 800067c:	2300      	movs	r3, #0
 800067e:	73fb      	strb	r3, [r7, #15]
        bool found = false;
 8000680:	2300      	movs	r3, #0
 8000682:	73bb      	strb	r3, [r7, #14]
        uint8_t reg_value;
        uint8_t i;

        if (NULL == p_status) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d101      	bne.n	800068e <as5600_get_status+0x1e>
                success = AS5600_ERROR_BAD_PARAMETER;
 800068a:	2301      	movs	r3, #1
 800068c:	73fb      	strb	r3, [r7, #15]
        }

        if (AS5600_ERROR_SUCCESS == success) {
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d108      	bne.n	80006a6 <as5600_get_status+0x36>
                success = as5600_read_8register(reg, &reg_value);
 8000694:	f107 020b 	add.w	r2, r7, #11
 8000698:	7b3b      	ldrb	r3, [r7, #12]
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f833 	bl	8000708 <as5600_read_8register>
 80006a2:	4603      	mov	r3, r0
 80006a4:	73fb      	strb	r3, [r7, #15]
        }

        if (AS5600_ERROR_SUCCESS == success) {
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d11f      	bne.n	80006ec <as5600_get_status+0x7c>

                for (i = 0; (m_available_status_len > i) && (!found); ++i) {
 80006ac:	2300      	movs	r3, #0
 80006ae:	737b      	strb	r3, [r7, #13]
 80006b0:	e00a      	b.n	80006c8 <as5600_get_status+0x58>
                        if (m_available_status[i] == reg_value) {
 80006b2:	7b7b      	ldrb	r3, [r7, #13]
 80006b4:	4a13      	ldr	r2, [pc, #76]	@ (8000704 <as5600_get_status+0x94>)
 80006b6:	5cd2      	ldrb	r2, [r2, r3]
 80006b8:	7afb      	ldrb	r3, [r7, #11]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d101      	bne.n	80006c2 <as5600_get_status+0x52>
                                found = true;
 80006be:	2301      	movs	r3, #1
 80006c0:	73bb      	strb	r3, [r7, #14]
                for (i = 0; (m_available_status_len > i) && (!found); ++i) {
 80006c2:	7b7b      	ldrb	r3, [r7, #13]
 80006c4:	3301      	adds	r3, #1
 80006c6:	737b      	strb	r3, [r7, #13]
 80006c8:	2206      	movs	r2, #6
 80006ca:	7b7b      	ldrb	r3, [r7, #13]
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d205      	bcs.n	80006dc <as5600_get_status+0x6c>
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	f083 0301 	eor.w	r3, r3, #1
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1ea      	bne.n	80006b2 <as5600_get_status+0x42>
                        }
                }

                if (!found) {
 80006dc:	7bbb      	ldrb	r3, [r7, #14]
 80006de:	f083 0301 	eor.w	r3, r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <as5600_get_status+0x7c>
                        success = AS5600_ERROR_RUNTIME_ERROR;
 80006e8:	2302      	movs	r3, #2
 80006ea:	73fb      	strb	r3, [r7, #15]
                }
        }

        if (AS5600_ERROR_SUCCESS == success) {
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d102      	bne.n	80006f8 <as5600_get_status+0x88>
                *p_status = (as5600_status_t)reg_value;
 80006f2:	7afa      	ldrb	r2, [r7, #11]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	701a      	strb	r2, [r3, #0]
        }

        return success;
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	08004864 	.word	0x08004864

08000708 <as5600_read_8register>:
 * @retval          *                           Any other errors returned by the
 *                                              sub-callees
 */
static as5600_error_t as5600_read_8register(as5600_register_t const reg,
                                            uint8_t * const p_rx_buffer)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
        as5600_error_t result = AS5600_ERROR_SUCCESS;
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]
        size_t const count = sizeof(uint8_t);
 8000718:	2301      	movs	r3, #1
 800071a:	60bb      	str	r3, [r7, #8]

        if (NULL == p_rx_buffer) {
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <as5600_read_8register+0x1e>
                result = AS5600_ERROR_BAD_PARAMETER;
 8000722:	2301      	movs	r3, #1
 8000724:	73fb      	strb	r3, [r7, #15]
        }

        if (AS5600_ERROR_SUCCESS == result) {
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d107      	bne.n	800073c <as5600_read_8register+0x34>
                result = as5600_read_n_consecutive_bytes(reg,
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	6839      	ldr	r1, [r7, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f862 	bl	80007fc <as5600_read_n_consecutive_bytes>
 8000738:	4603      	mov	r3, r0
 800073a:	73fb      	strb	r3, [r7, #15]
                                                         p_rx_buffer, count);
        }

        return result;
 800073c:	7bfb      	ldrb	r3, [r7, #15]

}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <as5600_read_16register>:
 * @retval          *                           Any other errors returned by the
 *                                              sub-callees
 */
static as5600_error_t as5600_read_16register(as5600_register_t const reg,
                                             uint16_t * const p_rx_buffer)
{
 8000746:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800074a:	b087      	sub	sp, #28
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	466b      	mov	r3, sp
 8000756:	461e      	mov	r6, r3
        size_t const count = sizeof(uint16_t);
 8000758:	2302      	movs	r3, #2
 800075a:	613b      	str	r3, [r7, #16]
        uint8_t buffer[count];
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	3b01      	subs	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	2200      	movs	r2, #0
 8000766:	4698      	mov	r8, r3
 8000768:	4691      	mov	r9, r2
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800077a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	2200      	movs	r2, #0
 8000782:	461c      	mov	r4, r3
 8000784:	4615      	mov	r5, r2
 8000786:	f04f 0200 	mov.w	r2, #0
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	00eb      	lsls	r3, r5, #3
 8000790:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000794:	00e2      	lsls	r2, r4, #3
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	3307      	adds	r3, #7
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	ebad 0d03 	sub.w	sp, sp, r3
 80007a2:	466b      	mov	r3, sp
 80007a4:	3300      	adds	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
        as5600_error_t result = AS5600_ERROR_SUCCESS;
 80007a8:	2300      	movs	r3, #0
 80007aa:	75fb      	strb	r3, [r7, #23]

        if (NULL == p_rx_buffer) {
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d101      	bne.n	80007b6 <as5600_read_16register+0x70>
                result = AS5600_ERROR_BAD_PARAMETER;
 80007b2:	2301      	movs	r3, #1
 80007b4:	75fb      	strb	r3, [r7, #23]
        }
        if (AS5600_ERROR_SUCCESS == result) {
 80007b6:	7dfb      	ldrb	r3, [r7, #23]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d107      	bne.n	80007cc <as5600_read_16register+0x86>
                result = as5600_read_n_consecutive_bytes(reg,
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f81a 	bl	80007fc <as5600_read_n_consecutive_bytes>
 80007c8:	4603      	mov	r3, r0
 80007ca:	75fb      	strb	r3, [r7, #23]
                                                         buffer, count);
        }


        if (AS5600_ERROR_SUCCESS == result) {
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10c      	bne.n	80007ec <as5600_read_16register+0xa6>
                *p_rx_buffer = ((uint16_t)buffer[0] << 8) | ((uint16_t)buffer[1]);
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	b21a      	sxth	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	785b      	ldrb	r3, [r3, #1]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	801a      	strh	r2, [r3, #0]
        }

        return result;
 80007ec:	7dfb      	ldrb	r3, [r7, #23]
 80007ee:	46b5      	mov	sp, r6

}
 80007f0:	4618      	mov	r0, r3
 80007f2:	371c      	adds	r7, #28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080007fc <as5600_read_n_consecutive_bytes>:
 */
static as5600_error_t as5600_read_n_consecutive_bytes(
                                                    as5600_register_t const reg,
                                                    uint8_t * const p_rx_buffer,
                                                    size_t const bytes_count)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b089      	sub	sp, #36	@ 0x24
 8000800:	af02      	add	r7, sp, #8
 8000802:	4603      	mov	r3, r0
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	73fb      	strb	r3, [r7, #15]
        as5600_error_t result = AS5600_ERROR_SUCCESS;
 800080a:	2300      	movs	r3, #0
 800080c:	75fb      	strb	r3, [r7, #23]
        uint8_t const reg_addr = (uint8_t)reg;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	757b      	strb	r3, [r7, #21]
        uint8_t xfer_func_result;

        if ((NULL == p_rx_buffer) || (!as5600_is_register_valid(reg))) {
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d009      	beq.n	800082c <as5600_read_n_consecutive_bytes+0x30>
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f836 	bl	800088c <as5600_is_register_valid>
 8000820:	4603      	mov	r3, r0
 8000822:	f083 0301 	eor.w	r3, r3, #1
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	d002      	beq.n	8000832 <as5600_read_n_consecutive_bytes+0x36>
                result = AS5600_ERROR_BAD_PARAMETER;
 800082c:	2301      	movs	r3, #1
 800082e:	75fb      	strb	r3, [r7, #23]
 8000830:	e00f      	b.n	8000852 <as5600_read_n_consecutive_bytes+0x56>
        } else if (!m_is_initialized) {
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <as5600_read_n_consecutive_bytes+0x88>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	f083 0301 	eor.w	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d002      	beq.n	8000846 <as5600_read_n_consecutive_bytes+0x4a>
                result = AS5600_ERROR_NOT_INITIALIZED;
 8000840:	2304      	movs	r3, #4
 8000842:	75fb      	strb	r3, [r7, #23]
 8000844:	e005      	b.n	8000852 <as5600_read_n_consecutive_bytes+0x56>
        } else if (NULL == m_as5600_xfer_func) {
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <as5600_read_n_consecutive_bytes+0x8c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <as5600_read_n_consecutive_bytes+0x56>
                result = AS5600_ERROR_GENERAL_ERROR;
 800084e:	2308      	movs	r3, #8
 8000850:	75fb      	strb	r3, [r7, #23]
        }
//        printf("success: %u\n", result);
        if (AS5600_ERROR_SUCCESS == result) {
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d110      	bne.n	800087a <as5600_read_n_consecutive_bytes+0x7e>


                xfer_func_result = m_as5600_xfer_func(m_as5600_i2c_addr,
 8000858:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <as5600_read_n_consecutive_bytes+0x8c>)
 800085a:	681c      	ldr	r4, [r3, #0]
 800085c:	2036      	movs	r0, #54	@ 0x36
 800085e:	f107 0115 	add.w	r1, r7, #21
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	2201      	movs	r2, #1
 800086a:	47a0      	blx	r4
 800086c:	4603      	mov	r3, r0
 800086e:	75bb      	strb	r3, [r7, #22]
                                                      &reg_addr,
                                                      sizeof(reg_addr),
                                                      p_rx_buffer, bytes_count);

                if (0 != xfer_func_result) {
 8000870:	7dbb      	ldrb	r3, [r7, #22]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <as5600_read_n_consecutive_bytes+0x7e>
                        result = AS5600_ERROR_I2C_ERROR;
 8000876:	2303      	movs	r3, #3
 8000878:	75fb      	strb	r3, [r7, #23]
                }
        }

        return result;
 800087a:	7dfb      	ldrb	r3, [r7, #23]
}
 800087c:	4618      	mov	r0, r3
 800087e:	371c      	adds	r7, #28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd90      	pop	{r4, r7, pc}
 8000884:	2000008c 	.word	0x2000008c
 8000888:	20000088 	.word	0x20000088

0800088c <as5600_is_register_valid>:
 * @return              bool                Result of the operation
 * @retval              True                Valid register
 * @retval              False               Invalid register
 */
static bool as5600_is_register_valid(as5600_register_t const reg)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
        bool is_valid;

        switch (reg) {
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b1c      	cmp	r3, #28
 800089a:	dc0e      	bgt.n	80008ba <as5600_is_register_valid+0x2e>
 800089c:	2b00      	cmp	r3, #0
 800089e:	db11      	blt.n	80008c4 <as5600_is_register_valid+0x38>
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <as5600_is_register_valid+0x4c>)
 80008a4:	40d3      	lsrs	r3, r2
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	bf14      	ite	ne
 80008ae:	2301      	movne	r3, #1
 80008b0:	2300      	moveq	r3, #0
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <as5600_is_register_valid+0x32>
 80008b8:	e004      	b.n	80008c4 <as5600_is_register_valid+0x38>
 80008ba:	2bff      	cmp	r3, #255	@ 0xff
 80008bc:	d102      	bne.n	80008c4 <as5600_is_register_valid+0x38>
        case AS5600_REGISTER_ANGLE_L:
        case AS5600_REGISTER_AGC:
        case AS5600_REGISTER_MAGNITUDE_H:
        case AS5600_REGISTER_MAGNITUDE_L:
        case AS5600_REGISTER_BURN:
                is_valid = true;
 80008be:	2301      	movs	r3, #1
 80008c0:	73fb      	strb	r3, [r7, #15]
                break;
 80008c2:	e002      	b.n	80008ca <as5600_is_register_valid+0x3e>
        default:
                is_valid = false;
 80008c4:	2300      	movs	r3, #0
 80008c6:	73fb      	strb	r3, [r7, #15]
                break;
 80008c8:	bf00      	nop
        }
        return is_valid;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	1c00f9ff 	.word	0x1c00f9ff

080008dc <__io_putchar>:

I2C_HandleTypeDef * hi2c = &hi2c1;
#define AS5600_ADDR  (0x36 << 1)


int __io_putchar(int ch) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008e4:	1d39      	adds	r1, r7, #4
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	2201      	movs	r2, #1
 80008ec:	4803      	ldr	r0, [pc, #12]	@ (80008fc <__io_putchar+0x20>)
 80008ee:	f002 fcb7 	bl	8003260 <HAL_UART_Transmit>
    return ch;
 80008f2:	687b      	ldr	r3, [r7, #4]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000e4 	.word	0x200000e4

08000900 <my_i2c_xfer>:
uint32_t const my_i2c_xfer(uint8_t const slave_address,
                           uint8_t const * const p_tx_buffer,
                           size_t const tx_buffer_size,
                           uint8_t * const p_rx_buffer,
                           size_t const rx_buffer_size)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af02      	add	r7, sp, #8
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	4603      	mov	r3, r0
 800090e:	73fb      	strb	r3, [r7, #15]

        uint32_t const timeout = 100;
 8000910:	2364      	movs	r3, #100	@ 0x64
 8000912:	613b      	str	r3, [r7, #16]
        HAL_StatusTypeDef result = HAL_OK;
 8000914:	2300      	movs	r3, #0
 8000916:	75fb      	strb	r3, [r7, #23]
        bool is_rx_operation = true;
 8000918:	2301      	movs	r3, #1
 800091a:	75bb      	strb	r3, [r7, #22]

        if ((NULL == p_tx_buffer) || (0 == tx_buffer_size)) {
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d002      	beq.n	8000928 <my_i2c_xfer+0x28>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d102      	bne.n	800092e <my_i2c_xfer+0x2e>
                result = HAL_ERROR;
 8000928:	2301      	movs	r3, #1
 800092a:	75fb      	strb	r3, [r7, #23]
 800092c:	e007      	b.n	800093e <my_i2c_xfer+0x3e>

        } else if ((NULL == p_rx_buffer) || (0 == rx_buffer_size)) {
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d002      	beq.n	800093a <my_i2c_xfer+0x3a>
 8000934:	6a3b      	ldr	r3, [r7, #32]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d101      	bne.n	800093e <my_i2c_xfer+0x3e>
                is_rx_operation = false;
 800093a:	2300      	movs	r3, #0
 800093c:	75bb      	strb	r3, [r7, #22]
        }

        if (HAL_OK == result) {
 800093e:	7dfb      	ldrb	r3, [r7, #23]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10c      	bne.n	800095e <my_i2c_xfer+0x5e>
                // TX operation
                result = HAL_I2C_Master_Transmit(hi2c,
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <my_i2c_xfer+0x90>)
 8000946:	6818      	ldr	r0, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	b29a      	uxth	r2, r3
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	4613      	mov	r3, r2
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	216c      	movs	r1, #108	@ 0x6c
 8000956:	f000 ff95 	bl	8001884 <HAL_I2C_Master_Transmit>
 800095a:	4603      	mov	r3, r0
 800095c:	75fb      	strb	r3, [r7, #23]
                                                 (uint16_t)tx_buffer_size,
                                                 timeout);
        }
//        printf("success: %u\n", result);

        if ((HAL_OK == result) && (is_rx_operation)) {
 800095e:	7dfb      	ldrb	r3, [r7, #23]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d10f      	bne.n	8000984 <my_i2c_xfer+0x84>
 8000964:	7dbb      	ldrb	r3, [r7, #22]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d00c      	beq.n	8000984 <my_i2c_xfer+0x84>
                // RX operation
                result = HAL_I2C_Master_Receive(hi2c,
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <my_i2c_xfer+0x90>)
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	b29a      	uxth	r2, r3
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	4613      	mov	r3, r2
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	216c      	movs	r1, #108	@ 0x6c
 800097c:	f001 f880 	bl	8001a80 <HAL_I2C_Master_Receive>
 8000980:	4603      	mov	r3, r0
 8000982:	75fb      	strb	r3, [r7, #23]
                                                p_rx_buffer,
                                                rx_buffer_size,
                                                timeout);
        }

        return result;
 8000984:	7dfb      	ldrb	r3, [r7, #23]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000000 	.word	0x20000000

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099a:	f000 fb43 	bl	8001024 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t tx_buffer[1] = {0x0E};  // AS5600 ANGLE_H register
 800099e:	230e      	movs	r3, #14
 80009a0:	733b      	strb	r3, [r7, #12]
  uint8_t rx_buffer[2] = {0};     // Will store 2 bytes from AS5600
 80009a2:	2300      	movs	r3, #0
 80009a4:	813b      	strh	r3, [r7, #8]

  uint8_t slave_addr = 0x36 << 1;  // AS5600 I2C address (shifted for HAL)
 80009a6:	236c      	movs	r3, #108	@ 0x6c
 80009a8:	75fb      	strb	r3, [r7, #23]
  extern UART_HandleTypeDef huart2; // or whatever UART you use

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009aa:	f000 f84f 	bl	8000a4c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ae:	f000 f913 	bl	8000bd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009b2:	f000 f8e7 	bl	8000b84 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009b6:	f000 f8b7 	bl	8000b28 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  as5600_status_t p_status;

  as5600_error_t result = as5600_init(my_i2c_xfer);
 80009ba:	4820      	ldr	r0, [pc, #128]	@ (8000a3c <main+0xa8>)
 80009bc:	f7ff fe0e 	bl	80005dc <as5600_init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	75bb      	strb	r3, [r7, #22]

  uint16_t angle;
  as5600_status_t debug;
  while (1)
  {
	  as5600_error_t err = as5600_get_angle(&angle);
 80009c4:	1dbb      	adds	r3, r7, #6
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fe2e 	bl	8000628 <as5600_get_angle>
 80009cc:	4603      	mov	r3, r0
 80009ce:	757b      	strb	r3, [r7, #21]
//	      printf("Angle: %u\r\n", (angle * 360)/4096);
	  if(err == AS5600_ERROR_SUCCESS) {
 80009d0:	7d7b      	ldrb	r3, [r7, #21]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d126      	bne.n	8000a24 <main+0x90>
//		  printf("Angle: %u\r\n", (angle * 360)/4096, ".%u");
		  int angle_hundredths = angle * 36000/4096;
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	461a      	mov	r2, r3
 80009da:	f648 43a0 	movw	r3, #36000	@ 0x8ca0
 80009de:	fb02 f303 	mul.w	r3, r2, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	da01      	bge.n	80009ea <main+0x56>
 80009e6:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80009ea:	131b      	asrs	r3, r3, #12
 80009ec:	613b      	str	r3, [r7, #16]
		  printf("%d.%02d°\r\n", angle_hundredths / 100, abs(angle_hundredths % 100));
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	4a13      	ldr	r2, [pc, #76]	@ (8000a40 <main+0xac>)
 80009f2:	fb82 1203 	smull	r1, r2, r2, r3
 80009f6:	1152      	asrs	r2, r2, #5
 80009f8:	17db      	asrs	r3, r3, #31
 80009fa:	1ad0      	subs	r0, r2, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <main+0xac>)
 8000a00:	fb83 1302 	smull	r1, r3, r3, r2
 8000a04:	1159      	asrs	r1, r3, #5
 8000a06:	17d3      	asrs	r3, r2, #31
 8000a08:	1acb      	subs	r3, r1, r3
 8000a0a:	2164      	movs	r1, #100	@ 0x64
 8000a0c:	fb01 f303 	mul.w	r3, r1, r3
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	bfb8      	it	lt
 8000a16:	425b      	neglt	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4601      	mov	r1, r0
 8000a1c:	4809      	ldr	r0, [pc, #36]	@ (8000a44 <main+0xb0>)
 8000a1e:	f003 f89d 	bl	8003b5c <iprintf>
 8000a22:	e004      	b.n	8000a2e <main+0x9a>

	  } else {
		  printf("ERROR: %d\r\n", err);
 8000a24:	7d7b      	ldrb	r3, [r7, #21]
 8000a26:	4619      	mov	r1, r3
 8000a28:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <main+0xb4>)
 8000a2a:	f003 f897 	bl	8003b5c <iprintf>
	  }

	  result = as5600_get_status(&debug);
 8000a2e:	1d7b      	adds	r3, r7, #5
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fe1d 	bl	8000670 <as5600_get_status>
 8000a36:	4603      	mov	r3, r0
 8000a38:	75bb      	strb	r3, [r7, #22]
  {
 8000a3a:	e7c3      	b.n	80009c4 <main+0x30>
 8000a3c:	08000901 	.word	0x08000901
 8000a40:	51eb851f 	.word	0x51eb851f
 8000a44:	0800484c 	.word	0x0800484c
 8000a48:	08004858 	.word	0x08004858

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b094      	sub	sp, #80	@ 0x50
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2234      	movs	r2, #52	@ 0x34
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 f8d3 	bl	8003c06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <SystemClock_Config+0xd4>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a78:	4a29      	ldr	r2, [pc, #164]	@ (8000b20 <SystemClock_Config+0xd4>)
 8000a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a80:	4b27      	ldr	r3, [pc, #156]	@ (8000b20 <SystemClock_Config+0xd4>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	4b24      	ldr	r3, [pc, #144]	@ (8000b24 <SystemClock_Config+0xd8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a98:	4a22      	ldr	r2, [pc, #136]	@ (8000b24 <SystemClock_Config+0xd8>)
 8000a9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4b20      	ldr	r3, [pc, #128]	@ (8000b24 <SystemClock_Config+0xd8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ac4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ac8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aca:	2304      	movs	r3, #4
 8000acc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 f8d2 	bl	8002c84 <HAL_RCC_OscConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ae6:	f000 f8d1 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aea:	230f      	movs	r3, #15
 8000aec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aee:	2302      	movs	r3, #2
 8000af0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2102      	movs	r1, #2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fd72 	bl	80025f0 <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b12:	f000 f8bb 	bl	8000c8c <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3750      	adds	r7, #80	@ 0x50
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40007000 	.word	0x40007000

08000b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <MX_I2C1_Init+0x50>)
 8000b2e:	4a13      	ldr	r2, [pc, #76]	@ (8000b7c <MX_I2C1_Init+0x54>)
 8000b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_I2C1_Init+0x50>)
 8000b34:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <MX_I2C1_Init+0x58>)
 8000b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <MX_I2C1_Init+0x50>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_I2C1_Init+0x50>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_I2C1_Init+0x50>)
 8000b46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <MX_I2C1_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_I2C1_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <MX_I2C1_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_I2C1_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <MX_I2C1_Init+0x50>)
 8000b66:	f000 fd49 	bl	80015fc <HAL_I2C_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b70:	f000 f88c 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000090 	.word	0x20000090
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	000186a0 	.word	0x000186a0

08000b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	@ (8000bd4 <MX_USART2_UART_Init+0x50>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	f002 fb00 	bl	80031c0 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bc6:	f000 f861 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000e4 	.word	0x200000e4
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b24      	ldr	r3, [pc, #144]	@ (8000c84 <MX_GPIO_Init+0xac>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a23      	ldr	r2, [pc, #140]	@ (8000c84 <MX_GPIO_Init+0xac>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <MX_GPIO_Init+0xac>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <MX_GPIO_Init+0xac>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a1c      	ldr	r2, [pc, #112]	@ (8000c84 <MX_GPIO_Init+0xac>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <MX_GPIO_Init+0xac>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <MX_GPIO_Init+0xac>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a15      	ldr	r2, [pc, #84]	@ (8000c84 <MX_GPIO_Init+0xac>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <MX_GPIO_Init+0xac>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <MX_GPIO_Init+0xac>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c84 <MX_GPIO_Init+0xac>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_GPIO_Init+0xac>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c64:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <MX_GPIO_Init+0xb0>)
 8000c76:	f000 fb2d 	bl	80012d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	@ 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020800 	.word	0x40020800

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <Error_Handler+0x8>

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cd6:	2007      	movs	r0, #7
 8000cd8:	f000 fac8 	bl	800126c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a19      	ldr	r2, [pc, #100]	@ (8000d6c <HAL_I2C_MspInit+0x84>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12c      	bne.n	8000d64 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a17      	ldr	r2, [pc, #92]	@ (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2c:	2312      	movs	r3, #18
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <HAL_I2C_MspInit+0x8c>)
 8000d44:	f000 fac6 	bl	80012d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d50:	4a07      	ldr	r2, [pc, #28]	@ (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	@ 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020400 	.word	0x40020400

08000d78 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a19      	ldr	r2, [pc, #100]	@ (8000dfc <HAL_UART_MspInit+0x84>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12b      	bne.n	8000df2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <HAL_UART_MspInit+0x88>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	4a17      	ldr	r2, [pc, #92]	@ (8000e00 <HAL_UART_MspInit+0x88>)
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <HAL_UART_MspInit+0x88>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <HAL_UART_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a10      	ldr	r2, [pc, #64]	@ (8000e00 <HAL_UART_MspInit+0x88>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <HAL_UART_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de2:	2307      	movs	r3, #7
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <HAL_UART_MspInit+0x8c>)
 8000dee:	f000 fa71 	bl	80012d4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	@ 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40004400 	.word	0x40004400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020000 	.word	0x40020000

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <NMI_Handler+0x4>

08000e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <MemManage_Handler+0x4>

08000e20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5e:	f000 f933 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e00a      	b.n	8000e8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e78:	f3af 8000 	nop.w
 8000e7c:	4601      	mov	r1, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1c5a      	adds	r2, r3, #1
 8000e82:	60ba      	str	r2, [r7, #8]
 8000e84:	b2ca      	uxtb	r2, r1
 8000e86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	dbf0      	blt.n	8000e78 <_read+0x12>
  }

  return len;
 8000e96:	687b      	ldr	r3, [r7, #4]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e009      	b.n	8000ec6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1c5a      	adds	r2, r3, #1
 8000eb6:	60ba      	str	r2, [r7, #8]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fd0e 	bl	80008dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	dbf1      	blt.n	8000eb2 <_write+0x12>
  }
  return len;
 8000ece:	687b      	ldr	r3, [r7, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_close>:

int _close(int file)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f00:	605a      	str	r2, [r3, #4]
  return 0;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_isatty>:

int _isatty(int file)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f18:	2301      	movs	r3, #1
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b085      	sub	sp, #20
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f002 fe98 	bl	8003ca4 <__errno>
 8000f74:	4603      	mov	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20020000 	.word	0x20020000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	2000012c 	.word	0x2000012c
 8000fa8:	20000280 	.word	0x20000280

08000fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	@ (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001008 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fd4:	f7ff ffea 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd8:	480c      	ldr	r0, [pc, #48]	@ (800100c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fda:	490d      	ldr	r1, [pc, #52]	@ (8001010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff0:	4c0a      	ldr	r4, [pc, #40]	@ (800101c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f002 fe57 	bl	8003cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fcc7 	bl	8000994 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001014:	080048c8 	.word	0x080048c8
  ldr r2, =_sbss
 8001018:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800101c:	20000280 	.word	0x20000280

08001020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001028:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <HAL_Init+0x40>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <HAL_Init+0x40>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800103e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	@ (8001064 <HAL_Init+0x40>)
 8001046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f90d 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fe1e 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f917 	bl	80012ba <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f000 f8ed 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	@ (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000004 	.word	0x20000004
 80010c0:	2000000c 	.word	0x2000000c
 80010c4:	20000008 	.word	0x20000008

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	2000000c 	.word	0x2000000c
 80010ec:	20000130 	.word	0x20000130

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	@ (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000130 	.word	0x20000130

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	@ (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	@ (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	@ 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	@ 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff47 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff5c 	bl	8001150 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffb0 	bl	8001228 <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	@ 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	e165      	b.n	80015bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f0:	2201      	movs	r2, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	429a      	cmp	r2, r3
 800130a:	f040 8154 	bne.w	80015b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b01      	cmp	r3, #1
 8001318:	d005      	beq.n	8001326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001322:	2b02      	cmp	r3, #2
 8001324:	d130      	bne.n	8001388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135c:	2201      	movs	r2, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 0201 	and.w	r2, r3, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b03      	cmp	r3, #3
 8001392:	d017      	beq.n	80013c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d123      	bne.n	8001418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	08da      	lsrs	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3208      	adds	r2, #8
 80013d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	08da      	lsrs	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3208      	adds	r2, #8
 8001412:	69b9      	ldr	r1, [r7, #24]
 8001414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0203 	and.w	r2, r3, #3
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80ae 	beq.w	80015b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b5d      	ldr	r3, [pc, #372]	@ (80015d4 <HAL_GPIO_Init+0x300>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001462:	4a5c      	ldr	r2, [pc, #368]	@ (80015d4 <HAL_GPIO_Init+0x300>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001468:	6453      	str	r3, [r2, #68]	@ 0x44
 800146a:	4b5a      	ldr	r3, [pc, #360]	@ (80015d4 <HAL_GPIO_Init+0x300>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001476:	4a58      	ldr	r2, [pc, #352]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4f      	ldr	r2, [pc, #316]	@ (80015dc <HAL_GPIO_Init+0x308>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d025      	beq.n	80014ee <HAL_GPIO_Init+0x21a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4e      	ldr	r2, [pc, #312]	@ (80015e0 <HAL_GPIO_Init+0x30c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01f      	beq.n	80014ea <HAL_GPIO_Init+0x216>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4d      	ldr	r2, [pc, #308]	@ (80015e4 <HAL_GPIO_Init+0x310>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0x212>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4c      	ldr	r2, [pc, #304]	@ (80015e8 <HAL_GPIO_Init+0x314>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x20e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4b      	ldr	r2, [pc, #300]	@ (80015ec <HAL_GPIO_Init+0x318>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x20a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4a      	ldr	r2, [pc, #296]	@ (80015f0 <HAL_GPIO_Init+0x31c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x206>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a49      	ldr	r2, [pc, #292]	@ (80015f4 <HAL_GPIO_Init+0x320>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x202>
 80014d2:	2306      	movs	r3, #6
 80014d4:	e00c      	b.n	80014f0 <HAL_GPIO_Init+0x21c>
 80014d6:	2307      	movs	r3, #7
 80014d8:	e00a      	b.n	80014f0 <HAL_GPIO_Init+0x21c>
 80014da:	2305      	movs	r3, #5
 80014dc:	e008      	b.n	80014f0 <HAL_GPIO_Init+0x21c>
 80014de:	2304      	movs	r3, #4
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x21c>
 80014e2:	2303      	movs	r3, #3
 80014e4:	e004      	b.n	80014f0 <HAL_GPIO_Init+0x21c>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e002      	b.n	80014f0 <HAL_GPIO_Init+0x21c>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_GPIO_Init+0x21c>
 80014ee:	2300      	movs	r3, #0
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	f002 0203 	and.w	r2, r2, #3
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	4093      	lsls	r3, r2
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001500:	4935      	ldr	r1, [pc, #212]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150e:	4b3a      	ldr	r3, [pc, #232]	@ (80015f8 <HAL_GPIO_Init+0x324>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001532:	4a31      	ldr	r2, [pc, #196]	@ (80015f8 <HAL_GPIO_Init+0x324>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001538:	4b2f      	ldr	r3, [pc, #188]	@ (80015f8 <HAL_GPIO_Init+0x324>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800155c:	4a26      	ldr	r2, [pc, #152]	@ (80015f8 <HAL_GPIO_Init+0x324>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001562:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <HAL_GPIO_Init+0x324>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001586:	4a1c      	ldr	r2, [pc, #112]	@ (80015f8 <HAL_GPIO_Init+0x324>)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <HAL_GPIO_Init+0x324>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b0:	4a11      	ldr	r2, [pc, #68]	@ (80015f8 <HAL_GPIO_Init+0x324>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3301      	adds	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	2b0f      	cmp	r3, #15
 80015c0:	f67f ae96 	bls.w	80012f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3724      	adds	r7, #36	@ 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40013800 	.word	0x40013800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020c00 	.word	0x40020c00
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40021800 	.word	0x40021800
 80015f8:	40013c00 	.word	0x40013c00

080015fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e12b      	b.n	8001866 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d106      	bne.n	8001628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fb60 	bl	8000ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2224      	movs	r2, #36	@ 0x24
 800162c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800164e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800165e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001660:	f001 f8b8 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8001664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4a81      	ldr	r2, [pc, #516]	@ (8001870 <HAL_I2C_Init+0x274>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d807      	bhi.n	8001680 <HAL_I2C_Init+0x84>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4a80      	ldr	r2, [pc, #512]	@ (8001874 <HAL_I2C_Init+0x278>)
 8001674:	4293      	cmp	r3, r2
 8001676:	bf94      	ite	ls
 8001678:	2301      	movls	r3, #1
 800167a:	2300      	movhi	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	e006      	b.n	800168e <HAL_I2C_Init+0x92>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4a7d      	ldr	r2, [pc, #500]	@ (8001878 <HAL_I2C_Init+0x27c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	bf94      	ite	ls
 8001688:	2301      	movls	r3, #1
 800168a:	2300      	movhi	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e0e7      	b.n	8001866 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4a78      	ldr	r2, [pc, #480]	@ (800187c <HAL_I2C_Init+0x280>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	0c9b      	lsrs	r3, r3, #18
 80016a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001870 <HAL_I2C_Init+0x274>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d802      	bhi.n	80016d0 <HAL_I2C_Init+0xd4>
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3301      	adds	r3, #1
 80016ce:	e009      	b.n	80016e4 <HAL_I2C_Init+0xe8>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	4a69      	ldr	r2, [pc, #420]	@ (8001880 <HAL_I2C_Init+0x284>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	099b      	lsrs	r3, r3, #6
 80016e2:	3301      	adds	r3, #1
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	495c      	ldr	r1, [pc, #368]	@ (8001870 <HAL_I2C_Init+0x274>)
 8001700:	428b      	cmp	r3, r1
 8001702:	d819      	bhi.n	8001738 <HAL_I2C_Init+0x13c>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1e59      	subs	r1, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001712:	1c59      	adds	r1, r3, #1
 8001714:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001718:	400b      	ands	r3, r1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00a      	beq.n	8001734 <HAL_I2C_Init+0x138>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1e59      	subs	r1, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fbb1 f3f3 	udiv	r3, r1, r3
 800172c:	3301      	adds	r3, #1
 800172e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001732:	e051      	b.n	80017d8 <HAL_I2C_Init+0x1dc>
 8001734:	2304      	movs	r3, #4
 8001736:	e04f      	b.n	80017d8 <HAL_I2C_Init+0x1dc>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d111      	bne.n	8001764 <HAL_I2C_Init+0x168>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1e58      	subs	r0, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6859      	ldr	r1, [r3, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	440b      	add	r3, r1
 800174e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001752:	3301      	adds	r3, #1
 8001754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf0c      	ite	eq
 800175c:	2301      	moveq	r3, #1
 800175e:	2300      	movne	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	e012      	b.n	800178a <HAL_I2C_Init+0x18e>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1e58      	subs	r0, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	0099      	lsls	r1, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	fbb0 f3f3 	udiv	r3, r0, r3
 800177a:	3301      	adds	r3, #1
 800177c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Init+0x196>
 800178e:	2301      	movs	r3, #1
 8001790:	e022      	b.n	80017d8 <HAL_I2C_Init+0x1dc>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10e      	bne.n	80017b8 <HAL_I2C_Init+0x1bc>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1e58      	subs	r0, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6859      	ldr	r1, [r3, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	440b      	add	r3, r1
 80017a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ac:	3301      	adds	r3, #1
 80017ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017b6:	e00f      	b.n	80017d8 <HAL_I2C_Init+0x1dc>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1e58      	subs	r0, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6859      	ldr	r1, [r3, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	0099      	lsls	r1, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	6809      	ldr	r1, [r1, #0]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001806:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6911      	ldr	r1, [r2, #16]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68d2      	ldr	r2, [r2, #12]
 8001812:	4311      	orrs	r1, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	430b      	orrs	r3, r1
 800181a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2220      	movs	r2, #32
 8001852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	000186a0 	.word	0x000186a0
 8001874:	001e847f 	.word	0x001e847f
 8001878:	003d08ff 	.word	0x003d08ff
 800187c:	431bde83 	.word	0x431bde83
 8001880:	10624dd3 	.word	0x10624dd3

08001884 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af02      	add	r7, sp, #8
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	461a      	mov	r2, r3
 8001890:	460b      	mov	r3, r1
 8001892:	817b      	strh	r3, [r7, #10]
 8001894:	4613      	mov	r3, r2
 8001896:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001898:	f7ff fc2a 	bl	80010f0 <HAL_GetTick>
 800189c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b20      	cmp	r3, #32
 80018a8:	f040 80e0 	bne.w	8001a6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2319      	movs	r3, #25
 80018b2:	2201      	movs	r2, #1
 80018b4:	4970      	ldr	r1, [pc, #448]	@ (8001a78 <HAL_I2C_Master_Transmit+0x1f4>)
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 fc64 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018c2:	2302      	movs	r3, #2
 80018c4:	e0d3      	b.n	8001a6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_I2C_Master_Transmit+0x50>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e0cc      	b.n	8001a6e <HAL_I2C_Master_Transmit+0x1ea>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d007      	beq.n	80018fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 0201 	orr.w	r2, r2, #1
 80018f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001908:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2221      	movs	r2, #33	@ 0x21
 800190e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2210      	movs	r2, #16
 8001916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	893a      	ldrh	r2, [r7, #8]
 800192a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4a50      	ldr	r2, [pc, #320]	@ (8001a7c <HAL_I2C_Master_Transmit+0x1f8>)
 800193a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800193c:	8979      	ldrh	r1, [r7, #10]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	6a3a      	ldr	r2, [r7, #32]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 face 	bl	8001ee4 <I2C_MasterRequestWrite>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e08d      	b.n	8001a6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001968:	e066      	b.n	8001a38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	6a39      	ldr	r1, [r7, #32]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 fd22 	bl	80023b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00d      	beq.n	8001996 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	2b04      	cmp	r3, #4
 8001980:	d107      	bne.n	8001992 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001990:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e06b      	b.n	8001a6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d11b      	bne.n	8001a0c <HAL_I2C_Master_Transmit+0x188>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d017      	beq.n	8001a0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	781a      	ldrb	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	6a39      	ldr	r1, [r7, #32]
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 fd19 	bl	8002448 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00d      	beq.n	8001a38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d107      	bne.n	8001a34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e01a      	b.n	8001a6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d194      	bne.n	800196a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2220      	movs	r2, #32
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e000      	b.n	8001a6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a6c:	2302      	movs	r3, #2
  }
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	00100002 	.word	0x00100002
 8001a7c:	ffff0000 	.word	0xffff0000

08001a80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	@ 0x30
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	817b      	strh	r3, [r7, #10]
 8001a90:	4613      	mov	r3, r2
 8001a92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff fb2c 	bl	80010f0 <HAL_GetTick>
 8001a98:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b20      	cmp	r3, #32
 8001aa4:	f040 8217 	bne.w	8001ed6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2319      	movs	r3, #25
 8001aae:	2201      	movs	r2, #1
 8001ab0:	497c      	ldr	r1, [pc, #496]	@ (8001ca4 <HAL_I2C_Master_Receive+0x224>)
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 fb66 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e20a      	b.n	8001ed8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_I2C_Master_Receive+0x50>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e203      	b.n	8001ed8 <HAL_I2C_Master_Receive+0x458>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d007      	beq.n	8001af6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0201 	orr.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2222      	movs	r2, #34	@ 0x22
 8001b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2210      	movs	r2, #16
 8001b12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	893a      	ldrh	r2, [r7, #8]
 8001b26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca8 <HAL_I2C_Master_Receive+0x228>)
 8001b36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b38:	8979      	ldrh	r1, [r7, #10]
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 fa52 	bl	8001fe8 <I2C_MasterRequestRead>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e1c4      	b.n	8001ed8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d113      	bne.n	8001b7e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	623b      	str	r3, [r7, #32]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e198      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d11b      	bne.n	8001bbe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e178      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d11b      	bne.n	8001bfe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001be4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	e158      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c24:	e144      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	f200 80f1 	bhi.w	8001e12 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d123      	bne.n	8001c80 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 fc4b 	bl	80024d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e145      	b.n	8001ed8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c7e:	e117      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d14e      	bne.n	8001d26 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c8e:	2200      	movs	r2, #0
 8001c90:	4906      	ldr	r1, [pc, #24]	@ (8001cac <HAL_I2C_Master_Receive+0x22c>)
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 fa76 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d008      	beq.n	8001cb0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e11a      	b.n	8001ed8 <HAL_I2C_Master_Receive+0x458>
 8001ca2:	bf00      	nop
 8001ca4:	00100002 	.word	0x00100002
 8001ca8:	ffff0000 	.word	0xffff0000
 8001cac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d24:	e0c4      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	496c      	ldr	r1, [pc, #432]	@ (8001ee0 <HAL_I2C_Master_Receive+0x460>)
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 fa27 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0cb      	b.n	8001ed8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4955      	ldr	r1, [pc, #340]	@ (8001ee0 <HAL_I2C_Master_Receive+0x460>)
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f9f9 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e09d      	b.n	8001ed8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e10:	e04e      	b.n	8001eb0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fb5e 	bl	80024d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e058      	b.n	8001ed8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d124      	bne.n	8001eb0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d107      	bne.n	8001e7e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e7c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f47f aeb6 	bne.w	8001c26 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001ed6:	2302      	movs	r3, #2
  }
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3728      	adds	r7, #40	@ 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	00010004 	.word	0x00010004

08001ee4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d006      	beq.n	8001f0e <I2C_MasterRequestWrite+0x2a>
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d003      	beq.n	8001f0e <I2C_MasterRequestWrite+0x2a>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f0c:	d108      	bne.n	8001f20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	e00b      	b.n	8001f38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	2b12      	cmp	r3, #18
 8001f26:	d107      	bne.n	8001f38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 f91d 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00d      	beq.n	8001f6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f5e:	d103      	bne.n	8001f68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e035      	b.n	8001fd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f74:	d108      	bne.n	8001f88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f76:	897b      	ldrh	r3, [r7, #10]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f84:	611a      	str	r2, [r3, #16]
 8001f86:	e01b      	b.n	8001fc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f88:	897b      	ldrh	r3, [r7, #10]
 8001f8a:	11db      	asrs	r3, r3, #7
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f003 0306 	and.w	r3, r3, #6
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f063 030f 	orn	r3, r3, #15
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	490e      	ldr	r1, [pc, #56]	@ (8001fe0 <I2C_MasterRequestWrite+0xfc>)
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f966 	bl	8002278 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e010      	b.n	8001fd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fb6:	897b      	ldrh	r3, [r7, #10]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4907      	ldr	r1, [pc, #28]	@ (8001fe4 <I2C_MasterRequestWrite+0x100>)
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f956 	bl	8002278 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	00010008 	.word	0x00010008
 8001fe4:	00010002 	.word	0x00010002

08001fe8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800200c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b08      	cmp	r3, #8
 8002012:	d006      	beq.n	8002022 <I2C_MasterRequestRead+0x3a>
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d003      	beq.n	8002022 <I2C_MasterRequestRead+0x3a>
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002020:	d108      	bne.n	8002034 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	e00b      	b.n	800204c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002038:	2b11      	cmp	r3, #17
 800203a:	d107      	bne.n	800204c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800204a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f893 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00d      	beq.n	8002080 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002072:	d103      	bne.n	800207c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e079      	b.n	8002174 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002088:	d108      	bne.n	800209c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800208a:	897b      	ldrh	r3, [r7, #10]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	b2da      	uxtb	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	611a      	str	r2, [r3, #16]
 800209a:	e05f      	b.n	800215c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800209c:	897b      	ldrh	r3, [r7, #10]
 800209e:	11db      	asrs	r3, r3, #7
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f003 0306 	and.w	r3, r3, #6
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f063 030f 	orn	r3, r3, #15
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4930      	ldr	r1, [pc, #192]	@ (800217c <I2C_MasterRequestRead+0x194>)
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f8dc 	bl	8002278 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e054      	b.n	8002174 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020ca:	897b      	ldrh	r3, [r7, #10]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	4929      	ldr	r1, [pc, #164]	@ (8002180 <I2C_MasterRequestRead+0x198>)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f8cc 	bl	8002278 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e044      	b.n	8002174 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800210e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f831 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00d      	beq.n	8002144 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002136:	d103      	bne.n	8002140 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e017      	b.n	8002174 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002144:	897b      	ldrh	r3, [r7, #10]
 8002146:	11db      	asrs	r3, r3, #7
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f003 0306 	and.w	r3, r3, #6
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f063 030e 	orn	r3, r3, #14
 8002154:	b2da      	uxtb	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4907      	ldr	r1, [pc, #28]	@ (8002180 <I2C_MasterRequestRead+0x198>)
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f888 	bl	8002278 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	00010008 	.word	0x00010008
 8002180:	00010002 	.word	0x00010002

08002184 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002194:	e048      	b.n	8002228 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d044      	beq.n	8002228 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219e:	f7fe ffa7 	bl	80010f0 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d302      	bcc.n	80021b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d139      	bne.n	8002228 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	0c1b      	lsrs	r3, r3, #16
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d10d      	bne.n	80021da <I2C_WaitOnFlagUntilTimeout+0x56>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	43da      	mvns	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	4013      	ands	r3, r2
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	e00c      	b.n	80021f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	43da      	mvns	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	4013      	ands	r3, r2
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d116      	bne.n	8002228 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	f043 0220 	orr.w	r2, r3, #32
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e023      	b.n	8002270 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	0c1b      	lsrs	r3, r3, #16
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d10d      	bne.n	800224e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	43da      	mvns	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4013      	ands	r3, r2
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	e00c      	b.n	8002268 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	43da      	mvns	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	4013      	ands	r3, r2
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	429a      	cmp	r2, r3
 800226c:	d093      	beq.n	8002196 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002286:	e071      	b.n	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002296:	d123      	bne.n	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022cc:	f043 0204 	orr.w	r2, r3, #4
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e067      	b.n	80023b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e6:	d041      	beq.n	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e8:	f7fe ff02 	bl	80010f0 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d302      	bcc.n	80022fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d136      	bne.n	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	d10c      	bne.n	8002322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	43da      	mvns	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4013      	ands	r3, r2
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	bf14      	ite	ne
 800231a:	2301      	movne	r3, #1
 800231c:	2300      	moveq	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	e00b      	b.n	800233a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	43da      	mvns	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4013      	ands	r3, r2
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d016      	beq.n	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	f043 0220 	orr.w	r2, r3, #32
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e021      	b.n	80023b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	0c1b      	lsrs	r3, r3, #16
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d10c      	bne.n	8002390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	43da      	mvns	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	4013      	ands	r3, r2
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf14      	ite	ne
 8002388:	2301      	movne	r3, #1
 800238a:	2300      	moveq	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	e00b      	b.n	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4013      	ands	r3, r2
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f47f af6d 	bne.w	8002288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023c4:	e034      	b.n	8002430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f8e3 	bl	8002592 <I2C_IsAcknowledgeFailed>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e034      	b.n	8002440 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d028      	beq.n	8002430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023de:	f7fe fe87 	bl	80010f0 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d302      	bcc.n	80023f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d11d      	bne.n	8002430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023fe:	2b80      	cmp	r3, #128	@ 0x80
 8002400:	d016      	beq.n	8002430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	f043 0220 	orr.w	r2, r3, #32
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e007      	b.n	8002440 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243a:	2b80      	cmp	r3, #128	@ 0x80
 800243c:	d1c3      	bne.n	80023c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002454:	e034      	b.n	80024c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f89b 	bl	8002592 <I2C_IsAcknowledgeFailed>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e034      	b.n	80024d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d028      	beq.n	80024c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246e:	f7fe fe3f 	bl	80010f0 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	429a      	cmp	r2, r3
 800247c:	d302      	bcc.n	8002484 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d11d      	bne.n	80024c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b04      	cmp	r3, #4
 8002490:	d016      	beq.n	80024c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	f043 0220 	orr.w	r2, r3, #32
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e007      	b.n	80024d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d1c3      	bne.n	8002456 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024e4:	e049      	b.n	800257a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d119      	bne.n	8002528 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0210 	mvn.w	r2, #16
 80024fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e030      	b.n	800258a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002528:	f7fe fde2 	bl	80010f0 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	429a      	cmp	r2, r3
 8002536:	d302      	bcc.n	800253e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d11d      	bne.n	800257a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002548:	2b40      	cmp	r3, #64	@ 0x40
 800254a:	d016      	beq.n	800257a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2220      	movs	r2, #32
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f043 0220 	orr.w	r2, r3, #32
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e007      	b.n	800258a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002584:	2b40      	cmp	r3, #64	@ 0x40
 8002586:	d1ae      	bne.n	80024e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a8:	d11b      	bne.n	80025e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	f043 0204 	orr.w	r2, r3, #4
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0cc      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b68      	ldr	r3, [pc, #416]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d90c      	bls.n	800262c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b65      	ldr	r3, [pc, #404]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a58      	ldr	r2, [pc, #352]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800264e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a52      	ldr	r2, [pc, #328]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d044      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d119      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b3f      	ldr	r3, [pc, #252]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3b      	ldr	r3, [pc, #236]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e067      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b37      	ldr	r3, [pc, #220]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4934      	ldr	r1, [pc, #208]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fe fd06 	bl	80010f0 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe fd02 	bl	80010f0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e04f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2b      	ldr	r3, [pc, #172]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b25      	ldr	r3, [pc, #148]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d20c      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b22      	ldr	r3, [pc, #136]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002776:	f000 f855 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 800277a:	4602      	mov	r2, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	490a      	ldr	r1, [pc, #40]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	5ccb      	ldrb	r3, [r1, r3]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fc66 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00
 80027ac:	40023800 	.word	0x40023800
 80027b0:	0800486c 	.word	0x0800486c
 80027b4:	20000004 	.word	0x20000004
 80027b8:	20000008 	.word	0x20000008

080027bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c0:	4b03      	ldr	r3, [pc, #12]	@ (80027d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000004 	.word	0x20000004

080027d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d8:	f7ff fff0 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	0a9b      	lsrs	r3, r3, #10
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4903      	ldr	r1, [pc, #12]	@ (80027f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40023800 	.word	0x40023800
 80027f8:	0800487c 	.word	0x0800487c

080027fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002800:	f7ff ffdc 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0b5b      	lsrs	r3, r3, #13
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	@ (8002820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	0800487c 	.word	0x0800487c

08002824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002828:	b0ae      	sub	sp, #184	@ 0xb8
 800282a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800284a:	4bcb      	ldr	r3, [pc, #812]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x354>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b0c      	cmp	r3, #12
 8002854:	f200 8206 	bhi.w	8002c64 <HAL_RCC_GetSysClockFreq+0x440>
 8002858:	a201      	add	r2, pc, #4	@ (adr r2, 8002860 <HAL_RCC_GetSysClockFreq+0x3c>)
 800285a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285e:	bf00      	nop
 8002860:	08002895 	.word	0x08002895
 8002864:	08002c65 	.word	0x08002c65
 8002868:	08002c65 	.word	0x08002c65
 800286c:	08002c65 	.word	0x08002c65
 8002870:	0800289d 	.word	0x0800289d
 8002874:	08002c65 	.word	0x08002c65
 8002878:	08002c65 	.word	0x08002c65
 800287c:	08002c65 	.word	0x08002c65
 8002880:	080028a5 	.word	0x080028a5
 8002884:	08002c65 	.word	0x08002c65
 8002888:	08002c65 	.word	0x08002c65
 800288c:	08002c65 	.word	0x08002c65
 8002890:	08002a95 	.word	0x08002a95
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002894:	4bb9      	ldr	r3, [pc, #740]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x358>)
 8002896:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800289a:	e1e7      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800289c:	4bb8      	ldr	r3, [pc, #736]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x35c>)
 800289e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028a2:	e1e3      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028a4:	4bb4      	ldr	r3, [pc, #720]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x354>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028b0:	4bb1      	ldr	r3, [pc, #708]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x354>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d071      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028bc:	4bae      	ldr	r3, [pc, #696]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x354>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	099b      	lsrs	r3, r3, #6
 80028c2:	2200      	movs	r2, #0
 80028c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028c8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80028cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028d8:	2300      	movs	r3, #0
 80028da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028e2:	4622      	mov	r2, r4
 80028e4:	462b      	mov	r3, r5
 80028e6:	f04f 0000 	mov.w	r0, #0
 80028ea:	f04f 0100 	mov.w	r1, #0
 80028ee:	0159      	lsls	r1, r3, #5
 80028f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028f4:	0150      	lsls	r0, r2, #5
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4621      	mov	r1, r4
 80028fc:	1a51      	subs	r1, r2, r1
 80028fe:	6439      	str	r1, [r7, #64]	@ 0x40
 8002900:	4629      	mov	r1, r5
 8002902:	eb63 0301 	sbc.w	r3, r3, r1
 8002906:	647b      	str	r3, [r7, #68]	@ 0x44
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002914:	4649      	mov	r1, r9
 8002916:	018b      	lsls	r3, r1, #6
 8002918:	4641      	mov	r1, r8
 800291a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800291e:	4641      	mov	r1, r8
 8002920:	018a      	lsls	r2, r1, #6
 8002922:	4641      	mov	r1, r8
 8002924:	1a51      	subs	r1, r2, r1
 8002926:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002928:	4649      	mov	r1, r9
 800292a:	eb63 0301 	sbc.w	r3, r3, r1
 800292e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800293c:	4649      	mov	r1, r9
 800293e:	00cb      	lsls	r3, r1, #3
 8002940:	4641      	mov	r1, r8
 8002942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002946:	4641      	mov	r1, r8
 8002948:	00ca      	lsls	r2, r1, #3
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	4603      	mov	r3, r0
 8002950:	4622      	mov	r2, r4
 8002952:	189b      	adds	r3, r3, r2
 8002954:	633b      	str	r3, [r7, #48]	@ 0x30
 8002956:	462b      	mov	r3, r5
 8002958:	460a      	mov	r2, r1
 800295a:	eb42 0303 	adc.w	r3, r2, r3
 800295e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800296c:	4629      	mov	r1, r5
 800296e:	024b      	lsls	r3, r1, #9
 8002970:	4621      	mov	r1, r4
 8002972:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002976:	4621      	mov	r1, r4
 8002978:	024a      	lsls	r2, r1, #9
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002982:	2200      	movs	r2, #0
 8002984:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002988:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800298c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002990:	f7fd fc8e 	bl	80002b0 <__aeabi_uldivmod>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4613      	mov	r3, r2
 800299a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800299e:	e067      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a0:	4b75      	ldr	r3, [pc, #468]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x354>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	2200      	movs	r2, #0
 80029a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029ac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80029b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029ba:	2300      	movs	r3, #0
 80029bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80029c2:	4622      	mov	r2, r4
 80029c4:	462b      	mov	r3, r5
 80029c6:	f04f 0000 	mov.w	r0, #0
 80029ca:	f04f 0100 	mov.w	r1, #0
 80029ce:	0159      	lsls	r1, r3, #5
 80029d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d4:	0150      	lsls	r0, r2, #5
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4621      	mov	r1, r4
 80029dc:	1a51      	subs	r1, r2, r1
 80029de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80029e0:	4629      	mov	r1, r5
 80029e2:	eb63 0301 	sbc.w	r3, r3, r1
 80029e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80029f4:	4649      	mov	r1, r9
 80029f6:	018b      	lsls	r3, r1, #6
 80029f8:	4641      	mov	r1, r8
 80029fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029fe:	4641      	mov	r1, r8
 8002a00:	018a      	lsls	r2, r1, #6
 8002a02:	4641      	mov	r1, r8
 8002a04:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a08:	4649      	mov	r1, r9
 8002a0a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a1a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a22:	4692      	mov	sl, r2
 8002a24:	469b      	mov	fp, r3
 8002a26:	4623      	mov	r3, r4
 8002a28:	eb1a 0303 	adds.w	r3, sl, r3
 8002a2c:	623b      	str	r3, [r7, #32]
 8002a2e:	462b      	mov	r3, r5
 8002a30:	eb4b 0303 	adc.w	r3, fp, r3
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a42:	4629      	mov	r1, r5
 8002a44:	028b      	lsls	r3, r1, #10
 8002a46:	4621      	mov	r1, r4
 8002a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	028a      	lsls	r2, r1, #10
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a58:	2200      	movs	r2, #0
 8002a5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a5c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a5e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a62:	f7fd fc25 	bl	80002b0 <__aeabi_uldivmod>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a70:	4b41      	ldr	r3, [pc, #260]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002a82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a92:	e0eb      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a94:	4b38      	ldr	r3, [pc, #224]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aa0:	4b35      	ldr	r3, [pc, #212]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d06b      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aac:	4b32      	ldr	r3, [pc, #200]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	099b      	lsrs	r3, r3, #6
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ab6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ab8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002abe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ac4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002ac8:	4622      	mov	r2, r4
 8002aca:	462b      	mov	r3, r5
 8002acc:	f04f 0000 	mov.w	r0, #0
 8002ad0:	f04f 0100 	mov.w	r1, #0
 8002ad4:	0159      	lsls	r1, r3, #5
 8002ad6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ada:	0150      	lsls	r0, r2, #5
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	1a51      	subs	r1, r2, r1
 8002ae4:	61b9      	str	r1, [r7, #24]
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	eb63 0301 	sbc.w	r3, r3, r1
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002afa:	4659      	mov	r1, fp
 8002afc:	018b      	lsls	r3, r1, #6
 8002afe:	4651      	mov	r1, sl
 8002b00:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b04:	4651      	mov	r1, sl
 8002b06:	018a      	lsls	r2, r1, #6
 8002b08:	4651      	mov	r1, sl
 8002b0a:	ebb2 0801 	subs.w	r8, r2, r1
 8002b0e:	4659      	mov	r1, fp
 8002b10:	eb63 0901 	sbc.w	r9, r3, r1
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b20:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b24:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b28:	4690      	mov	r8, r2
 8002b2a:	4699      	mov	r9, r3
 8002b2c:	4623      	mov	r3, r4
 8002b2e:	eb18 0303 	adds.w	r3, r8, r3
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	462b      	mov	r3, r5
 8002b36:	eb49 0303 	adc.w	r3, r9, r3
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b48:	4629      	mov	r1, r5
 8002b4a:	024b      	lsls	r3, r1, #9
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b52:	4621      	mov	r1, r4
 8002b54:	024a      	lsls	r2, r1, #9
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b5e:	2200      	movs	r2, #0
 8002b60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b62:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b68:	f7fd fba2 	bl	80002b0 <__aeabi_uldivmod>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4613      	mov	r3, r2
 8002b72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b76:	e065      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x420>
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	00f42400 	.word	0x00f42400
 8002b80:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b84:	4b3d      	ldr	r3, [pc, #244]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x458>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	4611      	mov	r1, r2
 8002b90:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b94:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b96:	2300      	movs	r3, #0
 8002b98:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b9a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b9e:	4642      	mov	r2, r8
 8002ba0:	464b      	mov	r3, r9
 8002ba2:	f04f 0000 	mov.w	r0, #0
 8002ba6:	f04f 0100 	mov.w	r1, #0
 8002baa:	0159      	lsls	r1, r3, #5
 8002bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb0:	0150      	lsls	r0, r2, #5
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4641      	mov	r1, r8
 8002bb8:	1a51      	subs	r1, r2, r1
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002bd0:	4659      	mov	r1, fp
 8002bd2:	018b      	lsls	r3, r1, #6
 8002bd4:	4651      	mov	r1, sl
 8002bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bda:	4651      	mov	r1, sl
 8002bdc:	018a      	lsls	r2, r1, #6
 8002bde:	4651      	mov	r1, sl
 8002be0:	1a54      	subs	r4, r2, r1
 8002be2:	4659      	mov	r1, fp
 8002be4:	eb63 0501 	sbc.w	r5, r3, r1
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	00eb      	lsls	r3, r5, #3
 8002bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bf6:	00e2      	lsls	r2, r4, #3
 8002bf8:	4614      	mov	r4, r2
 8002bfa:	461d      	mov	r5, r3
 8002bfc:	4643      	mov	r3, r8
 8002bfe:	18e3      	adds	r3, r4, r3
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	464b      	mov	r3, r9
 8002c04:	eb45 0303 	adc.w	r3, r5, r3
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c16:	4629      	mov	r1, r5
 8002c18:	028b      	lsls	r3, r1, #10
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c20:	4621      	mov	r1, r4
 8002c22:	028a      	lsls	r2, r1, #10
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c30:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c36:	f7fd fb3b 	bl	80002b0 <__aeabi_uldivmod>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4613      	mov	r3, r2
 8002c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c44:	4b0d      	ldr	r3, [pc, #52]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x458>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	0f1b      	lsrs	r3, r3, #28
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002c52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c62:	e003      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	37b8      	adds	r7, #184	@ 0xb8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	00f42400 	.word	0x00f42400

08002c84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e28d      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8083 	beq.w	8002daa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ca4:	4b94      	ldr	r3, [pc, #592]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d019      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cb0:	4b91      	ldr	r3, [pc, #580]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
        || \
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cbc:	4b8e      	ldr	r3, [pc, #568]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cc8:	d00c      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cca:	4b8b      	ldr	r3, [pc, #556]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d112      	bne.n	8002cfc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd6:	4b88      	ldr	r3, [pc, #544]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ce2:	d10b      	bne.n	8002cfc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	4b84      	ldr	r3, [pc, #528]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d05b      	beq.n	8002da8 <HAL_RCC_OscConfig+0x124>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d157      	bne.n	8002da8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e25a      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d04:	d106      	bne.n	8002d14 <HAL_RCC_OscConfig+0x90>
 8002d06:	4b7c      	ldr	r3, [pc, #496]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7b      	ldr	r2, [pc, #492]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e01d      	b.n	8002d50 <HAL_RCC_OscConfig+0xcc>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0xb4>
 8002d1e:	4b76      	ldr	r3, [pc, #472]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a75      	ldr	r2, [pc, #468]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b73      	ldr	r3, [pc, #460]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a72      	ldr	r2, [pc, #456]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0xcc>
 8002d38:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a6b      	ldr	r2, [pc, #428]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002d4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7fe f9ca 	bl	80010f0 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fe f9c6 	bl	80010f0 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	@ 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e21f      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b61      	ldr	r3, [pc, #388]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0xdc>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe f9b6 	bl	80010f0 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fe f9b2 	bl	80010f0 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	@ 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e20b      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	4b57      	ldr	r3, [pc, #348]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x104>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d06f      	beq.n	8002e96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002db6:	4b50      	ldr	r3, [pc, #320]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d017      	beq.n	8002df2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d105      	bne.n	8002dda <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dce:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00b      	beq.n	8002df2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dda:	4b47      	ldr	r3, [pc, #284]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d11c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de6:	4b44      	ldr	r3, [pc, #272]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d116      	bne.n	8002e20 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df2:	4b41      	ldr	r3, [pc, #260]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_RCC_OscConfig+0x186>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d001      	beq.n	8002e0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e1d3      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4937      	ldr	r1, [pc, #220]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1e:	e03a      	b.n	8002e96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d020      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e28:	4b34      	ldr	r3, [pc, #208]	@ (8002efc <HAL_RCC_OscConfig+0x278>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7fe f95f 	bl	80010f0 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e36:	f7fe f95b 	bl	80010f0 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e1b4      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e48:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e54:	4b28      	ldr	r3, [pc, #160]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4925      	ldr	r1, [pc, #148]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	600b      	str	r3, [r1, #0]
 8002e68:	e015      	b.n	8002e96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6a:	4b24      	ldr	r3, [pc, #144]	@ (8002efc <HAL_RCC_OscConfig+0x278>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe f93e 	bl	80010f0 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e78:	f7fe f93a 	bl	80010f0 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e193      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d036      	beq.n	8002f10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d016      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eaa:	4b15      	ldr	r3, [pc, #84]	@ (8002f00 <HAL_RCC_OscConfig+0x27c>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fe f91e 	bl	80010f0 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7fe f91a 	bl	80010f0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e173      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eca:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x234>
 8002ed6:	e01b      	b.n	8002f10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed8:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <HAL_RCC_OscConfig+0x27c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ede:	f7fe f907 	bl	80010f0 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	e00e      	b.n	8002f04 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee6:	f7fe f903 	bl	80010f0 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d907      	bls.n	8002f04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e15c      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	42470000 	.word	0x42470000
 8002f00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f04:	4b8a      	ldr	r3, [pc, #552]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1ea      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8097 	beq.w	800304c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f22:	4b83      	ldr	r3, [pc, #524]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10f      	bne.n	8002f4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	4b7f      	ldr	r3, [pc, #508]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	4a7e      	ldr	r2, [pc, #504]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f3e:	4b7c      	ldr	r3, [pc, #496]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4e:	4b79      	ldr	r3, [pc, #484]	@ (8003134 <HAL_RCC_OscConfig+0x4b0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d118      	bne.n	8002f8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5a:	4b76      	ldr	r3, [pc, #472]	@ (8003134 <HAL_RCC_OscConfig+0x4b0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a75      	ldr	r2, [pc, #468]	@ (8003134 <HAL_RCC_OscConfig+0x4b0>)
 8002f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f66:	f7fe f8c3 	bl	80010f0 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6e:	f7fe f8bf 	bl	80010f0 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e118      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	4b6c      	ldr	r3, [pc, #432]	@ (8003134 <HAL_RCC_OscConfig+0x4b0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x31e>
 8002f94:	4b66      	ldr	r3, [pc, #408]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f98:	4a65      	ldr	r2, [pc, #404]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa0:	e01c      	b.n	8002fdc <HAL_RCC_OscConfig+0x358>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x340>
 8002faa:	4b61      	ldr	r3, [pc, #388]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fae:	4a60      	ldr	r2, [pc, #384]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002fb0:	f043 0304 	orr.w	r3, r3, #4
 8002fb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb6:	4b5e      	ldr	r3, [pc, #376]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fba:	4a5d      	ldr	r2, [pc, #372]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc2:	e00b      	b.n	8002fdc <HAL_RCC_OscConfig+0x358>
 8002fc4:	4b5a      	ldr	r3, [pc, #360]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc8:	4a59      	ldr	r2, [pc, #356]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd0:	4b57      	ldr	r3, [pc, #348]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd4:	4a56      	ldr	r2, [pc, #344]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8002fd6:	f023 0304 	bic.w	r3, r3, #4
 8002fda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d015      	beq.n	8003010 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe4:	f7fe f884 	bl	80010f0 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fec:	f7fe f880 	bl	80010f0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0d7      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003002:	4b4b      	ldr	r3, [pc, #300]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0ee      	beq.n	8002fec <HAL_RCC_OscConfig+0x368>
 800300e:	e014      	b.n	800303a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003010:	f7fe f86e 	bl	80010f0 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003016:	e00a      	b.n	800302e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003018:	f7fe f86a 	bl	80010f0 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e0c1      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302e:	4b40      	ldr	r3, [pc, #256]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1ee      	bne.n	8003018 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d105      	bne.n	800304c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003040:	4b3b      	ldr	r3, [pc, #236]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	4a3a      	ldr	r2, [pc, #232]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8003046:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800304a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80ad 	beq.w	80031b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003056:	4b36      	ldr	r3, [pc, #216]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b08      	cmp	r3, #8
 8003060:	d060      	beq.n	8003124 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d145      	bne.n	80030f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306a:	4b33      	ldr	r3, [pc, #204]	@ (8003138 <HAL_RCC_OscConfig+0x4b4>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe f83e 	bl	80010f0 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003078:	f7fe f83a 	bl	80010f0 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e093      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	4b29      	ldr	r3, [pc, #164]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	019b      	lsls	r3, r3, #6
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	3b01      	subs	r3, #1
 80030b0:	041b      	lsls	r3, r3, #16
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	061b      	lsls	r3, r3, #24
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	071b      	lsls	r3, r3, #28
 80030c2:	491b      	ldr	r1, [pc, #108]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <HAL_RCC_OscConfig+0x4b4>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fe f80f 	bl	80010f0 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fe f80b 	bl	80010f0 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e064      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e8:	4b11      	ldr	r3, [pc, #68]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x452>
 80030f4:	e05c      	b.n	80031b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f6:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <HAL_RCC_OscConfig+0x4b4>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fd fff8 	bl	80010f0 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003104:	f7fd fff4 	bl	80010f0 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e04d      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003116:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_RCC_OscConfig+0x4ac>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x480>
 8003122:	e045      	b.n	80031b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d107      	bne.n	800313c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e040      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
 8003130:	40023800 	.word	0x40023800
 8003134:	40007000 	.word	0x40007000
 8003138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800313c:	4b1f      	ldr	r3, [pc, #124]	@ (80031bc <HAL_RCC_OscConfig+0x538>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d030      	beq.n	80031ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d129      	bne.n	80031ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d122      	bne.n	80031ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800316c:	4013      	ands	r3, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003174:	4293      	cmp	r3, r2
 8003176:	d119      	bne.n	80031ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	3b01      	subs	r3, #1
 8003186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d10f      	bne.n	80031ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800

080031c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e042      	b.n	8003258 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fd fdc6 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2224      	movs	r2, #36	@ 0x24
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f973 	bl	80034f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	@ 0x28
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b20      	cmp	r3, #32
 800327e:	d175      	bne.n	800336c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <HAL_UART_Transmit+0x2c>
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e06e      	b.n	800336e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2221      	movs	r2, #33	@ 0x21
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800329e:	f7fd ff27 	bl	80010f0 <HAL_GetTick>
 80032a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	88fa      	ldrh	r2, [r7, #6]
 80032a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	88fa      	ldrh	r2, [r7, #6]
 80032ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b8:	d108      	bne.n	80032cc <HAL_UART_Transmit+0x6c>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d104      	bne.n	80032cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	e003      	b.n	80032d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032d4:	e02e      	b.n	8003334 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2200      	movs	r2, #0
 80032de:	2180      	movs	r1, #128	@ 0x80
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f848 	bl	8003376 <UART_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e03a      	b.n	800336e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800330c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	3302      	adds	r3, #2
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	e007      	b.n	8003326 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	781a      	ldrb	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	3301      	adds	r3, #1
 8003324:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1cb      	bne.n	80032d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2200      	movs	r2, #0
 8003346:	2140      	movs	r1, #64	@ 0x40
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f814 	bl	8003376 <UART_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e006      	b.n	800336e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	e000      	b.n	800336e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800336c:	2302      	movs	r3, #2
  }
}
 800336e:	4618      	mov	r0, r3
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b086      	sub	sp, #24
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	4613      	mov	r3, r2
 8003384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003386:	e03b      	b.n	8003400 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d037      	beq.n	8003400 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003390:	f7fd feae 	bl	80010f0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	6a3a      	ldr	r2, [r7, #32]
 800339c:	429a      	cmp	r2, r3
 800339e:	d302      	bcc.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e03a      	b.n	8003420 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d023      	beq.n	8003400 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b80      	cmp	r3, #128	@ 0x80
 80033bc:	d020      	beq.n	8003400 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b40      	cmp	r3, #64	@ 0x40
 80033c2:	d01d      	beq.n	8003400 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d116      	bne.n	8003400 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f81d 	bl	8003428 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2208      	movs	r2, #8
 80033f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e00f      	b.n	8003420 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4013      	ands	r3, r2
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	429a      	cmp	r2, r3
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	429a      	cmp	r2, r3
 800341c:	d0b4      	beq.n	8003388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003428:	b480      	push	{r7}
 800342a:	b095      	sub	sp, #84	@ 0x54
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003442:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003450:	643a      	str	r2, [r7, #64]	@ 0x40
 8003452:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003456:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800345e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e5      	bne.n	8003430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3314      	adds	r3, #20
 800346a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	61fb      	str	r3, [r7, #28]
   return(result);
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3314      	adds	r3, #20
 8003482:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003484:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800348a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e5      	bne.n	8003464 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349c:	2b01      	cmp	r3, #1
 800349e:	d119      	bne.n	80034d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	330c      	adds	r3, #12
 80034a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f023 0310 	bic.w	r3, r3, #16
 80034b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034c0:	61ba      	str	r2, [r7, #24]
 80034c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6979      	ldr	r1, [r7, #20]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	613b      	str	r3, [r7, #16]
   return(result);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e5      	bne.n	80034a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034e2:	bf00      	nop
 80034e4:	3754      	adds	r7, #84	@ 0x54
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f4:	b0c0      	sub	sp, #256	@ 0x100
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350c:	68d9      	ldr	r1, [r3, #12]
 800350e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	ea40 0301 	orr.w	r3, r0, r1
 8003518:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	431a      	orrs	r2, r3
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	431a      	orrs	r2, r3
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003548:	f021 010c 	bic.w	r1, r1, #12
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003556:	430b      	orrs	r3, r1
 8003558:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800356a:	6999      	ldr	r1, [r3, #24]
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	ea40 0301 	orr.w	r3, r0, r1
 8003576:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b8f      	ldr	r3, [pc, #572]	@ (80037bc <UART_SetConfig+0x2cc>)
 8003580:	429a      	cmp	r2, r3
 8003582:	d005      	beq.n	8003590 <UART_SetConfig+0xa0>
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b8d      	ldr	r3, [pc, #564]	@ (80037c0 <UART_SetConfig+0x2d0>)
 800358c:	429a      	cmp	r2, r3
 800358e:	d104      	bne.n	800359a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003590:	f7ff f934 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 8003594:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003598:	e003      	b.n	80035a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800359a:	f7ff f91b 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 800359e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035ac:	f040 810c 	bne.w	80037c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80035be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80035c2:	4622      	mov	r2, r4
 80035c4:	462b      	mov	r3, r5
 80035c6:	1891      	adds	r1, r2, r2
 80035c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80035ca:	415b      	adcs	r3, r3
 80035cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035d2:	4621      	mov	r1, r4
 80035d4:	eb12 0801 	adds.w	r8, r2, r1
 80035d8:	4629      	mov	r1, r5
 80035da:	eb43 0901 	adc.w	r9, r3, r1
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035f2:	4690      	mov	r8, r2
 80035f4:	4699      	mov	r9, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	eb18 0303 	adds.w	r3, r8, r3
 80035fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003600:	462b      	mov	r3, r5
 8003602:	eb49 0303 	adc.w	r3, r9, r3
 8003606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003616:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800361a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800361e:	460b      	mov	r3, r1
 8003620:	18db      	adds	r3, r3, r3
 8003622:	653b      	str	r3, [r7, #80]	@ 0x50
 8003624:	4613      	mov	r3, r2
 8003626:	eb42 0303 	adc.w	r3, r2, r3
 800362a:	657b      	str	r3, [r7, #84]	@ 0x54
 800362c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003630:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003634:	f7fc fe3c 	bl	80002b0 <__aeabi_uldivmod>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4b61      	ldr	r3, [pc, #388]	@ (80037c4 <UART_SetConfig+0x2d4>)
 800363e:	fba3 2302 	umull	r2, r3, r3, r2
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	011c      	lsls	r4, r3, #4
 8003646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800364a:	2200      	movs	r2, #0
 800364c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003650:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003654:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003658:	4642      	mov	r2, r8
 800365a:	464b      	mov	r3, r9
 800365c:	1891      	adds	r1, r2, r2
 800365e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003660:	415b      	adcs	r3, r3
 8003662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003668:	4641      	mov	r1, r8
 800366a:	eb12 0a01 	adds.w	sl, r2, r1
 800366e:	4649      	mov	r1, r9
 8003670:	eb43 0b01 	adc.w	fp, r3, r1
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003680:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003684:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003688:	4692      	mov	sl, r2
 800368a:	469b      	mov	fp, r3
 800368c:	4643      	mov	r3, r8
 800368e:	eb1a 0303 	adds.w	r3, sl, r3
 8003692:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003696:	464b      	mov	r3, r9
 8003698:	eb4b 0303 	adc.w	r3, fp, r3
 800369c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036b4:	460b      	mov	r3, r1
 80036b6:	18db      	adds	r3, r3, r3
 80036b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80036ba:	4613      	mov	r3, r2
 80036bc:	eb42 0303 	adc.w	r3, r2, r3
 80036c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80036ca:	f7fc fdf1 	bl	80002b0 <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	4b3b      	ldr	r3, [pc, #236]	@ (80037c4 <UART_SetConfig+0x2d4>)
 80036d6:	fba3 2301 	umull	r2, r3, r3, r1
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2264      	movs	r2, #100	@ 0x64
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	1acb      	subs	r3, r1, r3
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80036ea:	4b36      	ldr	r3, [pc, #216]	@ (80037c4 <UART_SetConfig+0x2d4>)
 80036ec:	fba3 2302 	umull	r2, r3, r3, r2
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036f8:	441c      	add	r4, r3
 80036fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003704:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003708:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800370c:	4642      	mov	r2, r8
 800370e:	464b      	mov	r3, r9
 8003710:	1891      	adds	r1, r2, r2
 8003712:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003714:	415b      	adcs	r3, r3
 8003716:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800371c:	4641      	mov	r1, r8
 800371e:	1851      	adds	r1, r2, r1
 8003720:	6339      	str	r1, [r7, #48]	@ 0x30
 8003722:	4649      	mov	r1, r9
 8003724:	414b      	adcs	r3, r1
 8003726:	637b      	str	r3, [r7, #52]	@ 0x34
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003734:	4659      	mov	r1, fp
 8003736:	00cb      	lsls	r3, r1, #3
 8003738:	4651      	mov	r1, sl
 800373a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800373e:	4651      	mov	r1, sl
 8003740:	00ca      	lsls	r2, r1, #3
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	4603      	mov	r3, r0
 8003748:	4642      	mov	r2, r8
 800374a:	189b      	adds	r3, r3, r2
 800374c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003750:	464b      	mov	r3, r9
 8003752:	460a      	mov	r2, r1
 8003754:	eb42 0303 	adc.w	r3, r2, r3
 8003758:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003768:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800376c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003770:	460b      	mov	r3, r1
 8003772:	18db      	adds	r3, r3, r3
 8003774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003776:	4613      	mov	r3, r2
 8003778:	eb42 0303 	adc.w	r3, r2, r3
 800377c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800377e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003782:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003786:	f7fc fd93 	bl	80002b0 <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <UART_SetConfig+0x2d4>)
 8003790:	fba3 1302 	umull	r1, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	2164      	movs	r1, #100	@ 0x64
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	3332      	adds	r3, #50	@ 0x32
 80037a2:	4a08      	ldr	r2, [pc, #32]	@ (80037c4 <UART_SetConfig+0x2d4>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	f003 0207 	and.w	r2, r3, #7
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4422      	add	r2, r4
 80037b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037b8:	e106      	b.n	80039c8 <UART_SetConfig+0x4d8>
 80037ba:	bf00      	nop
 80037bc:	40011000 	.word	0x40011000
 80037c0:	40011400 	.word	0x40011400
 80037c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037cc:	2200      	movs	r2, #0
 80037ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80037d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80037da:	4642      	mov	r2, r8
 80037dc:	464b      	mov	r3, r9
 80037de:	1891      	adds	r1, r2, r2
 80037e0:	6239      	str	r1, [r7, #32]
 80037e2:	415b      	adcs	r3, r3
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ea:	4641      	mov	r1, r8
 80037ec:	1854      	adds	r4, r2, r1
 80037ee:	4649      	mov	r1, r9
 80037f0:	eb43 0501 	adc.w	r5, r3, r1
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	00eb      	lsls	r3, r5, #3
 80037fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003802:	00e2      	lsls	r2, r4, #3
 8003804:	4614      	mov	r4, r2
 8003806:	461d      	mov	r5, r3
 8003808:	4643      	mov	r3, r8
 800380a:	18e3      	adds	r3, r4, r3
 800380c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003810:	464b      	mov	r3, r9
 8003812:	eb45 0303 	adc.w	r3, r5, r3
 8003816:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003826:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003836:	4629      	mov	r1, r5
 8003838:	008b      	lsls	r3, r1, #2
 800383a:	4621      	mov	r1, r4
 800383c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003840:	4621      	mov	r1, r4
 8003842:	008a      	lsls	r2, r1, #2
 8003844:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003848:	f7fc fd32 	bl	80002b0 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4b60      	ldr	r3, [pc, #384]	@ (80039d4 <UART_SetConfig+0x4e4>)
 8003852:	fba3 2302 	umull	r2, r3, r3, r2
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	011c      	lsls	r4, r3, #4
 800385a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800385e:	2200      	movs	r2, #0
 8003860:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003864:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003868:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800386c:	4642      	mov	r2, r8
 800386e:	464b      	mov	r3, r9
 8003870:	1891      	adds	r1, r2, r2
 8003872:	61b9      	str	r1, [r7, #24]
 8003874:	415b      	adcs	r3, r3
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800387c:	4641      	mov	r1, r8
 800387e:	1851      	adds	r1, r2, r1
 8003880:	6139      	str	r1, [r7, #16]
 8003882:	4649      	mov	r1, r9
 8003884:	414b      	adcs	r3, r1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003894:	4659      	mov	r1, fp
 8003896:	00cb      	lsls	r3, r1, #3
 8003898:	4651      	mov	r1, sl
 800389a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800389e:	4651      	mov	r1, sl
 80038a0:	00ca      	lsls	r2, r1, #3
 80038a2:	4610      	mov	r0, r2
 80038a4:	4619      	mov	r1, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	4642      	mov	r2, r8
 80038aa:	189b      	adds	r3, r3, r2
 80038ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038b0:	464b      	mov	r3, r9
 80038b2:	460a      	mov	r2, r1
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80038d4:	4649      	mov	r1, r9
 80038d6:	008b      	lsls	r3, r1, #2
 80038d8:	4641      	mov	r1, r8
 80038da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038de:	4641      	mov	r1, r8
 80038e0:	008a      	lsls	r2, r1, #2
 80038e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80038e6:	f7fc fce3 	bl	80002b0 <__aeabi_uldivmod>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	4b38      	ldr	r3, [pc, #224]	@ (80039d4 <UART_SetConfig+0x4e4>)
 80038f2:	fba3 2301 	umull	r2, r3, r3, r1
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2264      	movs	r2, #100	@ 0x64
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	1acb      	subs	r3, r1, r3
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	3332      	adds	r3, #50	@ 0x32
 8003904:	4a33      	ldr	r2, [pc, #204]	@ (80039d4 <UART_SetConfig+0x4e4>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003910:	441c      	add	r4, r3
 8003912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003916:	2200      	movs	r2, #0
 8003918:	673b      	str	r3, [r7, #112]	@ 0x70
 800391a:	677a      	str	r2, [r7, #116]	@ 0x74
 800391c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003920:	4642      	mov	r2, r8
 8003922:	464b      	mov	r3, r9
 8003924:	1891      	adds	r1, r2, r2
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	415b      	adcs	r3, r3
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003930:	4641      	mov	r1, r8
 8003932:	1851      	adds	r1, r2, r1
 8003934:	6039      	str	r1, [r7, #0]
 8003936:	4649      	mov	r1, r9
 8003938:	414b      	adcs	r3, r1
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003948:	4659      	mov	r1, fp
 800394a:	00cb      	lsls	r3, r1, #3
 800394c:	4651      	mov	r1, sl
 800394e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003952:	4651      	mov	r1, sl
 8003954:	00ca      	lsls	r2, r1, #3
 8003956:	4610      	mov	r0, r2
 8003958:	4619      	mov	r1, r3
 800395a:	4603      	mov	r3, r0
 800395c:	4642      	mov	r2, r8
 800395e:	189b      	adds	r3, r3, r2
 8003960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003962:	464b      	mov	r3, r9
 8003964:	460a      	mov	r2, r1
 8003966:	eb42 0303 	adc.w	r3, r2, r3
 800396a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	663b      	str	r3, [r7, #96]	@ 0x60
 8003976:	667a      	str	r2, [r7, #100]	@ 0x64
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003984:	4649      	mov	r1, r9
 8003986:	008b      	lsls	r3, r1, #2
 8003988:	4641      	mov	r1, r8
 800398a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800398e:	4641      	mov	r1, r8
 8003990:	008a      	lsls	r2, r1, #2
 8003992:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003996:	f7fc fc8b 	bl	80002b0 <__aeabi_uldivmod>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <UART_SetConfig+0x4e4>)
 80039a0:	fba3 1302 	umull	r1, r3, r3, r2
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	2164      	movs	r1, #100	@ 0x64
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	3332      	adds	r3, #50	@ 0x32
 80039b2:	4a08      	ldr	r2, [pc, #32]	@ (80039d4 <UART_SetConfig+0x4e4>)
 80039b4:	fba2 2303 	umull	r2, r3, r2, r3
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	f003 020f 	and.w	r2, r3, #15
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4422      	add	r2, r4
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	bf00      	nop
 80039ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80039ce:	46bd      	mov	sp, r7
 80039d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d4:	51eb851f 	.word	0x51eb851f

080039d8 <std>:
 80039d8:	2300      	movs	r3, #0
 80039da:	b510      	push	{r4, lr}
 80039dc:	4604      	mov	r4, r0
 80039de:	e9c0 3300 	strd	r3, r3, [r0]
 80039e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039e6:	6083      	str	r3, [r0, #8]
 80039e8:	8181      	strh	r1, [r0, #12]
 80039ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80039ec:	81c2      	strh	r2, [r0, #14]
 80039ee:	6183      	str	r3, [r0, #24]
 80039f0:	4619      	mov	r1, r3
 80039f2:	2208      	movs	r2, #8
 80039f4:	305c      	adds	r0, #92	@ 0x5c
 80039f6:	f000 f906 	bl	8003c06 <memset>
 80039fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003a30 <std+0x58>)
 80039fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80039fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003a34 <std+0x5c>)
 8003a00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a02:	4b0d      	ldr	r3, [pc, #52]	@ (8003a38 <std+0x60>)
 8003a04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a06:	4b0d      	ldr	r3, [pc, #52]	@ (8003a3c <std+0x64>)
 8003a08:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a40 <std+0x68>)
 8003a0c:	6224      	str	r4, [r4, #32]
 8003a0e:	429c      	cmp	r4, r3
 8003a10:	d006      	beq.n	8003a20 <std+0x48>
 8003a12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003a16:	4294      	cmp	r4, r2
 8003a18:	d002      	beq.n	8003a20 <std+0x48>
 8003a1a:	33d0      	adds	r3, #208	@ 0xd0
 8003a1c:	429c      	cmp	r4, r3
 8003a1e:	d105      	bne.n	8003a2c <std+0x54>
 8003a20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a28:	f000 b966 	b.w	8003cf8 <__retarget_lock_init_recursive>
 8003a2c:	bd10      	pop	{r4, pc}
 8003a2e:	bf00      	nop
 8003a30:	08003b81 	.word	0x08003b81
 8003a34:	08003ba3 	.word	0x08003ba3
 8003a38:	08003bdb 	.word	0x08003bdb
 8003a3c:	08003bff 	.word	0x08003bff
 8003a40:	20000134 	.word	0x20000134

08003a44 <stdio_exit_handler>:
 8003a44:	4a02      	ldr	r2, [pc, #8]	@ (8003a50 <stdio_exit_handler+0xc>)
 8003a46:	4903      	ldr	r1, [pc, #12]	@ (8003a54 <stdio_exit_handler+0x10>)
 8003a48:	4803      	ldr	r0, [pc, #12]	@ (8003a58 <stdio_exit_handler+0x14>)
 8003a4a:	f000 b869 	b.w	8003b20 <_fwalk_sglue>
 8003a4e:	bf00      	nop
 8003a50:	20000010 	.word	0x20000010
 8003a54:	08004595 	.word	0x08004595
 8003a58:	20000020 	.word	0x20000020

08003a5c <cleanup_stdio>:
 8003a5c:	6841      	ldr	r1, [r0, #4]
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <cleanup_stdio+0x34>)
 8003a60:	4299      	cmp	r1, r3
 8003a62:	b510      	push	{r4, lr}
 8003a64:	4604      	mov	r4, r0
 8003a66:	d001      	beq.n	8003a6c <cleanup_stdio+0x10>
 8003a68:	f000 fd94 	bl	8004594 <_fflush_r>
 8003a6c:	68a1      	ldr	r1, [r4, #8]
 8003a6e:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <cleanup_stdio+0x38>)
 8003a70:	4299      	cmp	r1, r3
 8003a72:	d002      	beq.n	8003a7a <cleanup_stdio+0x1e>
 8003a74:	4620      	mov	r0, r4
 8003a76:	f000 fd8d 	bl	8004594 <_fflush_r>
 8003a7a:	68e1      	ldr	r1, [r4, #12]
 8003a7c:	4b06      	ldr	r3, [pc, #24]	@ (8003a98 <cleanup_stdio+0x3c>)
 8003a7e:	4299      	cmp	r1, r3
 8003a80:	d004      	beq.n	8003a8c <cleanup_stdio+0x30>
 8003a82:	4620      	mov	r0, r4
 8003a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a88:	f000 bd84 	b.w	8004594 <_fflush_r>
 8003a8c:	bd10      	pop	{r4, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000134 	.word	0x20000134
 8003a94:	2000019c 	.word	0x2000019c
 8003a98:	20000204 	.word	0x20000204

08003a9c <global_stdio_init.part.0>:
 8003a9c:	b510      	push	{r4, lr}
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <global_stdio_init.part.0+0x30>)
 8003aa0:	4c0b      	ldr	r4, [pc, #44]	@ (8003ad0 <global_stdio_init.part.0+0x34>)
 8003aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8003ad4 <global_stdio_init.part.0+0x38>)
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2104      	movs	r1, #4
 8003aac:	f7ff ff94 	bl	80039d8 <std>
 8003ab0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	2109      	movs	r1, #9
 8003ab8:	f7ff ff8e 	bl	80039d8 <std>
 8003abc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac6:	2112      	movs	r1, #18
 8003ac8:	f7ff bf86 	b.w	80039d8 <std>
 8003acc:	2000026c 	.word	0x2000026c
 8003ad0:	20000134 	.word	0x20000134
 8003ad4:	08003a45 	.word	0x08003a45

08003ad8 <__sfp_lock_acquire>:
 8003ad8:	4801      	ldr	r0, [pc, #4]	@ (8003ae0 <__sfp_lock_acquire+0x8>)
 8003ada:	f000 b90e 	b.w	8003cfa <__retarget_lock_acquire_recursive>
 8003ade:	bf00      	nop
 8003ae0:	20000275 	.word	0x20000275

08003ae4 <__sfp_lock_release>:
 8003ae4:	4801      	ldr	r0, [pc, #4]	@ (8003aec <__sfp_lock_release+0x8>)
 8003ae6:	f000 b909 	b.w	8003cfc <__retarget_lock_release_recursive>
 8003aea:	bf00      	nop
 8003aec:	20000275 	.word	0x20000275

08003af0 <__sinit>:
 8003af0:	b510      	push	{r4, lr}
 8003af2:	4604      	mov	r4, r0
 8003af4:	f7ff fff0 	bl	8003ad8 <__sfp_lock_acquire>
 8003af8:	6a23      	ldr	r3, [r4, #32]
 8003afa:	b11b      	cbz	r3, 8003b04 <__sinit+0x14>
 8003afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b00:	f7ff bff0 	b.w	8003ae4 <__sfp_lock_release>
 8003b04:	4b04      	ldr	r3, [pc, #16]	@ (8003b18 <__sinit+0x28>)
 8003b06:	6223      	str	r3, [r4, #32]
 8003b08:	4b04      	ldr	r3, [pc, #16]	@ (8003b1c <__sinit+0x2c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f5      	bne.n	8003afc <__sinit+0xc>
 8003b10:	f7ff ffc4 	bl	8003a9c <global_stdio_init.part.0>
 8003b14:	e7f2      	b.n	8003afc <__sinit+0xc>
 8003b16:	bf00      	nop
 8003b18:	08003a5d 	.word	0x08003a5d
 8003b1c:	2000026c 	.word	0x2000026c

08003b20 <_fwalk_sglue>:
 8003b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b24:	4607      	mov	r7, r0
 8003b26:	4688      	mov	r8, r1
 8003b28:	4614      	mov	r4, r2
 8003b2a:	2600      	movs	r6, #0
 8003b2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b30:	f1b9 0901 	subs.w	r9, r9, #1
 8003b34:	d505      	bpl.n	8003b42 <_fwalk_sglue+0x22>
 8003b36:	6824      	ldr	r4, [r4, #0]
 8003b38:	2c00      	cmp	r4, #0
 8003b3a:	d1f7      	bne.n	8003b2c <_fwalk_sglue+0xc>
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b42:	89ab      	ldrh	r3, [r5, #12]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d907      	bls.n	8003b58 <_fwalk_sglue+0x38>
 8003b48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	d003      	beq.n	8003b58 <_fwalk_sglue+0x38>
 8003b50:	4629      	mov	r1, r5
 8003b52:	4638      	mov	r0, r7
 8003b54:	47c0      	blx	r8
 8003b56:	4306      	orrs	r6, r0
 8003b58:	3568      	adds	r5, #104	@ 0x68
 8003b5a:	e7e9      	b.n	8003b30 <_fwalk_sglue+0x10>

08003b5c <iprintf>:
 8003b5c:	b40f      	push	{r0, r1, r2, r3}
 8003b5e:	b507      	push	{r0, r1, r2, lr}
 8003b60:	4906      	ldr	r1, [pc, #24]	@ (8003b7c <iprintf+0x20>)
 8003b62:	ab04      	add	r3, sp, #16
 8003b64:	6808      	ldr	r0, [r1, #0]
 8003b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b6a:	6881      	ldr	r1, [r0, #8]
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	f000 f9e9 	bl	8003f44 <_vfiprintf_r>
 8003b72:	b003      	add	sp, #12
 8003b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b78:	b004      	add	sp, #16
 8003b7a:	4770      	bx	lr
 8003b7c:	2000001c 	.word	0x2000001c

08003b80 <__sread>:
 8003b80:	b510      	push	{r4, lr}
 8003b82:	460c      	mov	r4, r1
 8003b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b88:	f000 f868 	bl	8003c5c <_read_r>
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	bfab      	itete	ge
 8003b90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b92:	89a3      	ldrhlt	r3, [r4, #12]
 8003b94:	181b      	addge	r3, r3, r0
 8003b96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b9a:	bfac      	ite	ge
 8003b9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b9e:	81a3      	strhlt	r3, [r4, #12]
 8003ba0:	bd10      	pop	{r4, pc}

08003ba2 <__swrite>:
 8003ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba6:	461f      	mov	r7, r3
 8003ba8:	898b      	ldrh	r3, [r1, #12]
 8003baa:	05db      	lsls	r3, r3, #23
 8003bac:	4605      	mov	r5, r0
 8003bae:	460c      	mov	r4, r1
 8003bb0:	4616      	mov	r6, r2
 8003bb2:	d505      	bpl.n	8003bc0 <__swrite+0x1e>
 8003bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb8:	2302      	movs	r3, #2
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f000 f83c 	bl	8003c38 <_lseek_r>
 8003bc0:	89a3      	ldrh	r3, [r4, #12]
 8003bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bca:	81a3      	strh	r3, [r4, #12]
 8003bcc:	4632      	mov	r2, r6
 8003bce:	463b      	mov	r3, r7
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd6:	f000 b853 	b.w	8003c80 <_write_r>

08003bda <__sseek>:
 8003bda:	b510      	push	{r4, lr}
 8003bdc:	460c      	mov	r4, r1
 8003bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003be2:	f000 f829 	bl	8003c38 <_lseek_r>
 8003be6:	1c43      	adds	r3, r0, #1
 8003be8:	89a3      	ldrh	r3, [r4, #12]
 8003bea:	bf15      	itete	ne
 8003bec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003bee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003bf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003bf6:	81a3      	strheq	r3, [r4, #12]
 8003bf8:	bf18      	it	ne
 8003bfa:	81a3      	strhne	r3, [r4, #12]
 8003bfc:	bd10      	pop	{r4, pc}

08003bfe <__sclose>:
 8003bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c02:	f000 b809 	b.w	8003c18 <_close_r>

08003c06 <memset>:
 8003c06:	4402      	add	r2, r0
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d100      	bne.n	8003c10 <memset+0xa>
 8003c0e:	4770      	bx	lr
 8003c10:	f803 1b01 	strb.w	r1, [r3], #1
 8003c14:	e7f9      	b.n	8003c0a <memset+0x4>
	...

08003c18 <_close_r>:
 8003c18:	b538      	push	{r3, r4, r5, lr}
 8003c1a:	4d06      	ldr	r5, [pc, #24]	@ (8003c34 <_close_r+0x1c>)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	4604      	mov	r4, r0
 8003c20:	4608      	mov	r0, r1
 8003c22:	602b      	str	r3, [r5, #0]
 8003c24:	f7fd f958 	bl	8000ed8 <_close>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	d102      	bne.n	8003c32 <_close_r+0x1a>
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	b103      	cbz	r3, 8003c32 <_close_r+0x1a>
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	bd38      	pop	{r3, r4, r5, pc}
 8003c34:	20000270 	.word	0x20000270

08003c38 <_lseek_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	4d07      	ldr	r5, [pc, #28]	@ (8003c58 <_lseek_r+0x20>)
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	4608      	mov	r0, r1
 8003c40:	4611      	mov	r1, r2
 8003c42:	2200      	movs	r2, #0
 8003c44:	602a      	str	r2, [r5, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f7fd f96d 	bl	8000f26 <_lseek>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d102      	bne.n	8003c56 <_lseek_r+0x1e>
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	b103      	cbz	r3, 8003c56 <_lseek_r+0x1e>
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	20000270 	.word	0x20000270

08003c5c <_read_r>:
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	4d07      	ldr	r5, [pc, #28]	@ (8003c7c <_read_r+0x20>)
 8003c60:	4604      	mov	r4, r0
 8003c62:	4608      	mov	r0, r1
 8003c64:	4611      	mov	r1, r2
 8003c66:	2200      	movs	r2, #0
 8003c68:	602a      	str	r2, [r5, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f7fd f8fb 	bl	8000e66 <_read>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	d102      	bne.n	8003c7a <_read_r+0x1e>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	b103      	cbz	r3, 8003c7a <_read_r+0x1e>
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	bd38      	pop	{r3, r4, r5, pc}
 8003c7c:	20000270 	.word	0x20000270

08003c80 <_write_r>:
 8003c80:	b538      	push	{r3, r4, r5, lr}
 8003c82:	4d07      	ldr	r5, [pc, #28]	@ (8003ca0 <_write_r+0x20>)
 8003c84:	4604      	mov	r4, r0
 8003c86:	4608      	mov	r0, r1
 8003c88:	4611      	mov	r1, r2
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	602a      	str	r2, [r5, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f7fd f906 	bl	8000ea0 <_write>
 8003c94:	1c43      	adds	r3, r0, #1
 8003c96:	d102      	bne.n	8003c9e <_write_r+0x1e>
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	b103      	cbz	r3, 8003c9e <_write_r+0x1e>
 8003c9c:	6023      	str	r3, [r4, #0]
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ca0:	20000270 	.word	0x20000270

08003ca4 <__errno>:
 8003ca4:	4b01      	ldr	r3, [pc, #4]	@ (8003cac <__errno+0x8>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	2000001c 	.word	0x2000001c

08003cb0 <__libc_init_array>:
 8003cb0:	b570      	push	{r4, r5, r6, lr}
 8003cb2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ce8 <__libc_init_array+0x38>)
 8003cb4:	4c0d      	ldr	r4, [pc, #52]	@ (8003cec <__libc_init_array+0x3c>)
 8003cb6:	1b64      	subs	r4, r4, r5
 8003cb8:	10a4      	asrs	r4, r4, #2
 8003cba:	2600      	movs	r6, #0
 8003cbc:	42a6      	cmp	r6, r4
 8003cbe:	d109      	bne.n	8003cd4 <__libc_init_array+0x24>
 8003cc0:	4d0b      	ldr	r5, [pc, #44]	@ (8003cf0 <__libc_init_array+0x40>)
 8003cc2:	4c0c      	ldr	r4, [pc, #48]	@ (8003cf4 <__libc_init_array+0x44>)
 8003cc4:	f000 fdb6 	bl	8004834 <_init>
 8003cc8:	1b64      	subs	r4, r4, r5
 8003cca:	10a4      	asrs	r4, r4, #2
 8003ccc:	2600      	movs	r6, #0
 8003cce:	42a6      	cmp	r6, r4
 8003cd0:	d105      	bne.n	8003cde <__libc_init_array+0x2e>
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd8:	4798      	blx	r3
 8003cda:	3601      	adds	r6, #1
 8003cdc:	e7ee      	b.n	8003cbc <__libc_init_array+0xc>
 8003cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce2:	4798      	blx	r3
 8003ce4:	3601      	adds	r6, #1
 8003ce6:	e7f2      	b.n	8003cce <__libc_init_array+0x1e>
 8003ce8:	080048c0 	.word	0x080048c0
 8003cec:	080048c0 	.word	0x080048c0
 8003cf0:	080048c0 	.word	0x080048c0
 8003cf4:	080048c4 	.word	0x080048c4

08003cf8 <__retarget_lock_init_recursive>:
 8003cf8:	4770      	bx	lr

08003cfa <__retarget_lock_acquire_recursive>:
 8003cfa:	4770      	bx	lr

08003cfc <__retarget_lock_release_recursive>:
 8003cfc:	4770      	bx	lr
	...

08003d00 <_free_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4605      	mov	r5, r0
 8003d04:	2900      	cmp	r1, #0
 8003d06:	d041      	beq.n	8003d8c <_free_r+0x8c>
 8003d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d0c:	1f0c      	subs	r4, r1, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bfb8      	it	lt
 8003d12:	18e4      	addlt	r4, r4, r3
 8003d14:	f000 f8e0 	bl	8003ed8 <__malloc_lock>
 8003d18:	4a1d      	ldr	r2, [pc, #116]	@ (8003d90 <_free_r+0x90>)
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	b933      	cbnz	r3, 8003d2c <_free_r+0x2c>
 8003d1e:	6063      	str	r3, [r4, #4]
 8003d20:	6014      	str	r4, [r2, #0]
 8003d22:	4628      	mov	r0, r5
 8003d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d28:	f000 b8dc 	b.w	8003ee4 <__malloc_unlock>
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	d908      	bls.n	8003d42 <_free_r+0x42>
 8003d30:	6820      	ldr	r0, [r4, #0]
 8003d32:	1821      	adds	r1, r4, r0
 8003d34:	428b      	cmp	r3, r1
 8003d36:	bf01      	itttt	eq
 8003d38:	6819      	ldreq	r1, [r3, #0]
 8003d3a:	685b      	ldreq	r3, [r3, #4]
 8003d3c:	1809      	addeq	r1, r1, r0
 8003d3e:	6021      	streq	r1, [r4, #0]
 8003d40:	e7ed      	b.n	8003d1e <_free_r+0x1e>
 8003d42:	461a      	mov	r2, r3
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	b10b      	cbz	r3, 8003d4c <_free_r+0x4c>
 8003d48:	42a3      	cmp	r3, r4
 8003d4a:	d9fa      	bls.n	8003d42 <_free_r+0x42>
 8003d4c:	6811      	ldr	r1, [r2, #0]
 8003d4e:	1850      	adds	r0, r2, r1
 8003d50:	42a0      	cmp	r0, r4
 8003d52:	d10b      	bne.n	8003d6c <_free_r+0x6c>
 8003d54:	6820      	ldr	r0, [r4, #0]
 8003d56:	4401      	add	r1, r0
 8003d58:	1850      	adds	r0, r2, r1
 8003d5a:	4283      	cmp	r3, r0
 8003d5c:	6011      	str	r1, [r2, #0]
 8003d5e:	d1e0      	bne.n	8003d22 <_free_r+0x22>
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	6053      	str	r3, [r2, #4]
 8003d66:	4408      	add	r0, r1
 8003d68:	6010      	str	r0, [r2, #0]
 8003d6a:	e7da      	b.n	8003d22 <_free_r+0x22>
 8003d6c:	d902      	bls.n	8003d74 <_free_r+0x74>
 8003d6e:	230c      	movs	r3, #12
 8003d70:	602b      	str	r3, [r5, #0]
 8003d72:	e7d6      	b.n	8003d22 <_free_r+0x22>
 8003d74:	6820      	ldr	r0, [r4, #0]
 8003d76:	1821      	adds	r1, r4, r0
 8003d78:	428b      	cmp	r3, r1
 8003d7a:	bf04      	itt	eq
 8003d7c:	6819      	ldreq	r1, [r3, #0]
 8003d7e:	685b      	ldreq	r3, [r3, #4]
 8003d80:	6063      	str	r3, [r4, #4]
 8003d82:	bf04      	itt	eq
 8003d84:	1809      	addeq	r1, r1, r0
 8003d86:	6021      	streq	r1, [r4, #0]
 8003d88:	6054      	str	r4, [r2, #4]
 8003d8a:	e7ca      	b.n	8003d22 <_free_r+0x22>
 8003d8c:	bd38      	pop	{r3, r4, r5, pc}
 8003d8e:	bf00      	nop
 8003d90:	2000027c 	.word	0x2000027c

08003d94 <sbrk_aligned>:
 8003d94:	b570      	push	{r4, r5, r6, lr}
 8003d96:	4e0f      	ldr	r6, [pc, #60]	@ (8003dd4 <sbrk_aligned+0x40>)
 8003d98:	460c      	mov	r4, r1
 8003d9a:	6831      	ldr	r1, [r6, #0]
 8003d9c:	4605      	mov	r5, r0
 8003d9e:	b911      	cbnz	r1, 8003da6 <sbrk_aligned+0x12>
 8003da0:	f000 fcb4 	bl	800470c <_sbrk_r>
 8003da4:	6030      	str	r0, [r6, #0]
 8003da6:	4621      	mov	r1, r4
 8003da8:	4628      	mov	r0, r5
 8003daa:	f000 fcaf 	bl	800470c <_sbrk_r>
 8003dae:	1c43      	adds	r3, r0, #1
 8003db0:	d103      	bne.n	8003dba <sbrk_aligned+0x26>
 8003db2:	f04f 34ff 	mov.w	r4, #4294967295
 8003db6:	4620      	mov	r0, r4
 8003db8:	bd70      	pop	{r4, r5, r6, pc}
 8003dba:	1cc4      	adds	r4, r0, #3
 8003dbc:	f024 0403 	bic.w	r4, r4, #3
 8003dc0:	42a0      	cmp	r0, r4
 8003dc2:	d0f8      	beq.n	8003db6 <sbrk_aligned+0x22>
 8003dc4:	1a21      	subs	r1, r4, r0
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	f000 fca0 	bl	800470c <_sbrk_r>
 8003dcc:	3001      	adds	r0, #1
 8003dce:	d1f2      	bne.n	8003db6 <sbrk_aligned+0x22>
 8003dd0:	e7ef      	b.n	8003db2 <sbrk_aligned+0x1e>
 8003dd2:	bf00      	nop
 8003dd4:	20000278 	.word	0x20000278

08003dd8 <_malloc_r>:
 8003dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ddc:	1ccd      	adds	r5, r1, #3
 8003dde:	f025 0503 	bic.w	r5, r5, #3
 8003de2:	3508      	adds	r5, #8
 8003de4:	2d0c      	cmp	r5, #12
 8003de6:	bf38      	it	cc
 8003de8:	250c      	movcc	r5, #12
 8003dea:	2d00      	cmp	r5, #0
 8003dec:	4606      	mov	r6, r0
 8003dee:	db01      	blt.n	8003df4 <_malloc_r+0x1c>
 8003df0:	42a9      	cmp	r1, r5
 8003df2:	d904      	bls.n	8003dfe <_malloc_r+0x26>
 8003df4:	230c      	movs	r3, #12
 8003df6:	6033      	str	r3, [r6, #0]
 8003df8:	2000      	movs	r0, #0
 8003dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ed4 <_malloc_r+0xfc>
 8003e02:	f000 f869 	bl	8003ed8 <__malloc_lock>
 8003e06:	f8d8 3000 	ldr.w	r3, [r8]
 8003e0a:	461c      	mov	r4, r3
 8003e0c:	bb44      	cbnz	r4, 8003e60 <_malloc_r+0x88>
 8003e0e:	4629      	mov	r1, r5
 8003e10:	4630      	mov	r0, r6
 8003e12:	f7ff ffbf 	bl	8003d94 <sbrk_aligned>
 8003e16:	1c43      	adds	r3, r0, #1
 8003e18:	4604      	mov	r4, r0
 8003e1a:	d158      	bne.n	8003ece <_malloc_r+0xf6>
 8003e1c:	f8d8 4000 	ldr.w	r4, [r8]
 8003e20:	4627      	mov	r7, r4
 8003e22:	2f00      	cmp	r7, #0
 8003e24:	d143      	bne.n	8003eae <_malloc_r+0xd6>
 8003e26:	2c00      	cmp	r4, #0
 8003e28:	d04b      	beq.n	8003ec2 <_malloc_r+0xea>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	4639      	mov	r1, r7
 8003e2e:	4630      	mov	r0, r6
 8003e30:	eb04 0903 	add.w	r9, r4, r3
 8003e34:	f000 fc6a 	bl	800470c <_sbrk_r>
 8003e38:	4581      	cmp	r9, r0
 8003e3a:	d142      	bne.n	8003ec2 <_malloc_r+0xea>
 8003e3c:	6821      	ldr	r1, [r4, #0]
 8003e3e:	1a6d      	subs	r5, r5, r1
 8003e40:	4629      	mov	r1, r5
 8003e42:	4630      	mov	r0, r6
 8003e44:	f7ff ffa6 	bl	8003d94 <sbrk_aligned>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d03a      	beq.n	8003ec2 <_malloc_r+0xea>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	442b      	add	r3, r5
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	f8d8 3000 	ldr.w	r3, [r8]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	bb62      	cbnz	r2, 8003eb4 <_malloc_r+0xdc>
 8003e5a:	f8c8 7000 	str.w	r7, [r8]
 8003e5e:	e00f      	b.n	8003e80 <_malloc_r+0xa8>
 8003e60:	6822      	ldr	r2, [r4, #0]
 8003e62:	1b52      	subs	r2, r2, r5
 8003e64:	d420      	bmi.n	8003ea8 <_malloc_r+0xd0>
 8003e66:	2a0b      	cmp	r2, #11
 8003e68:	d917      	bls.n	8003e9a <_malloc_r+0xc2>
 8003e6a:	1961      	adds	r1, r4, r5
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	6025      	str	r5, [r4, #0]
 8003e70:	bf18      	it	ne
 8003e72:	6059      	strne	r1, [r3, #4]
 8003e74:	6863      	ldr	r3, [r4, #4]
 8003e76:	bf08      	it	eq
 8003e78:	f8c8 1000 	streq.w	r1, [r8]
 8003e7c:	5162      	str	r2, [r4, r5]
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	4630      	mov	r0, r6
 8003e82:	f000 f82f 	bl	8003ee4 <__malloc_unlock>
 8003e86:	f104 000b 	add.w	r0, r4, #11
 8003e8a:	1d23      	adds	r3, r4, #4
 8003e8c:	f020 0007 	bic.w	r0, r0, #7
 8003e90:	1ac2      	subs	r2, r0, r3
 8003e92:	bf1c      	itt	ne
 8003e94:	1a1b      	subne	r3, r3, r0
 8003e96:	50a3      	strne	r3, [r4, r2]
 8003e98:	e7af      	b.n	8003dfa <_malloc_r+0x22>
 8003e9a:	6862      	ldr	r2, [r4, #4]
 8003e9c:	42a3      	cmp	r3, r4
 8003e9e:	bf0c      	ite	eq
 8003ea0:	f8c8 2000 	streq.w	r2, [r8]
 8003ea4:	605a      	strne	r2, [r3, #4]
 8003ea6:	e7eb      	b.n	8003e80 <_malloc_r+0xa8>
 8003ea8:	4623      	mov	r3, r4
 8003eaa:	6864      	ldr	r4, [r4, #4]
 8003eac:	e7ae      	b.n	8003e0c <_malloc_r+0x34>
 8003eae:	463c      	mov	r4, r7
 8003eb0:	687f      	ldr	r7, [r7, #4]
 8003eb2:	e7b6      	b.n	8003e22 <_malloc_r+0x4a>
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	42a3      	cmp	r3, r4
 8003eba:	d1fb      	bne.n	8003eb4 <_malloc_r+0xdc>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	6053      	str	r3, [r2, #4]
 8003ec0:	e7de      	b.n	8003e80 <_malloc_r+0xa8>
 8003ec2:	230c      	movs	r3, #12
 8003ec4:	6033      	str	r3, [r6, #0]
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	f000 f80c 	bl	8003ee4 <__malloc_unlock>
 8003ecc:	e794      	b.n	8003df8 <_malloc_r+0x20>
 8003ece:	6005      	str	r5, [r0, #0]
 8003ed0:	e7d6      	b.n	8003e80 <_malloc_r+0xa8>
 8003ed2:	bf00      	nop
 8003ed4:	2000027c 	.word	0x2000027c

08003ed8 <__malloc_lock>:
 8003ed8:	4801      	ldr	r0, [pc, #4]	@ (8003ee0 <__malloc_lock+0x8>)
 8003eda:	f7ff bf0e 	b.w	8003cfa <__retarget_lock_acquire_recursive>
 8003ede:	bf00      	nop
 8003ee0:	20000274 	.word	0x20000274

08003ee4 <__malloc_unlock>:
 8003ee4:	4801      	ldr	r0, [pc, #4]	@ (8003eec <__malloc_unlock+0x8>)
 8003ee6:	f7ff bf09 	b.w	8003cfc <__retarget_lock_release_recursive>
 8003eea:	bf00      	nop
 8003eec:	20000274 	.word	0x20000274

08003ef0 <__sfputc_r>:
 8003ef0:	6893      	ldr	r3, [r2, #8]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	b410      	push	{r4}
 8003ef8:	6093      	str	r3, [r2, #8]
 8003efa:	da08      	bge.n	8003f0e <__sfputc_r+0x1e>
 8003efc:	6994      	ldr	r4, [r2, #24]
 8003efe:	42a3      	cmp	r3, r4
 8003f00:	db01      	blt.n	8003f06 <__sfputc_r+0x16>
 8003f02:	290a      	cmp	r1, #10
 8003f04:	d103      	bne.n	8003f0e <__sfputc_r+0x1e>
 8003f06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f0a:	f000 bb6b 	b.w	80045e4 <__swbuf_r>
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	1c58      	adds	r0, r3, #1
 8003f12:	6010      	str	r0, [r2, #0]
 8003f14:	7019      	strb	r1, [r3, #0]
 8003f16:	4608      	mov	r0, r1
 8003f18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <__sfputs_r>:
 8003f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f20:	4606      	mov	r6, r0
 8003f22:	460f      	mov	r7, r1
 8003f24:	4614      	mov	r4, r2
 8003f26:	18d5      	adds	r5, r2, r3
 8003f28:	42ac      	cmp	r4, r5
 8003f2a:	d101      	bne.n	8003f30 <__sfputs_r+0x12>
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	e007      	b.n	8003f40 <__sfputs_r+0x22>
 8003f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f34:	463a      	mov	r2, r7
 8003f36:	4630      	mov	r0, r6
 8003f38:	f7ff ffda 	bl	8003ef0 <__sfputc_r>
 8003f3c:	1c43      	adds	r3, r0, #1
 8003f3e:	d1f3      	bne.n	8003f28 <__sfputs_r+0xa>
 8003f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f44 <_vfiprintf_r>:
 8003f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f48:	460d      	mov	r5, r1
 8003f4a:	b09d      	sub	sp, #116	@ 0x74
 8003f4c:	4614      	mov	r4, r2
 8003f4e:	4698      	mov	r8, r3
 8003f50:	4606      	mov	r6, r0
 8003f52:	b118      	cbz	r0, 8003f5c <_vfiprintf_r+0x18>
 8003f54:	6a03      	ldr	r3, [r0, #32]
 8003f56:	b90b      	cbnz	r3, 8003f5c <_vfiprintf_r+0x18>
 8003f58:	f7ff fdca 	bl	8003af0 <__sinit>
 8003f5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f5e:	07d9      	lsls	r1, r3, #31
 8003f60:	d405      	bmi.n	8003f6e <_vfiprintf_r+0x2a>
 8003f62:	89ab      	ldrh	r3, [r5, #12]
 8003f64:	059a      	lsls	r2, r3, #22
 8003f66:	d402      	bmi.n	8003f6e <_vfiprintf_r+0x2a>
 8003f68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f6a:	f7ff fec6 	bl	8003cfa <__retarget_lock_acquire_recursive>
 8003f6e:	89ab      	ldrh	r3, [r5, #12]
 8003f70:	071b      	lsls	r3, r3, #28
 8003f72:	d501      	bpl.n	8003f78 <_vfiprintf_r+0x34>
 8003f74:	692b      	ldr	r3, [r5, #16]
 8003f76:	b99b      	cbnz	r3, 8003fa0 <_vfiprintf_r+0x5c>
 8003f78:	4629      	mov	r1, r5
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	f000 fb70 	bl	8004660 <__swsetup_r>
 8003f80:	b170      	cbz	r0, 8003fa0 <_vfiprintf_r+0x5c>
 8003f82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f84:	07dc      	lsls	r4, r3, #31
 8003f86:	d504      	bpl.n	8003f92 <_vfiprintf_r+0x4e>
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8c:	b01d      	add	sp, #116	@ 0x74
 8003f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f92:	89ab      	ldrh	r3, [r5, #12]
 8003f94:	0598      	lsls	r0, r3, #22
 8003f96:	d4f7      	bmi.n	8003f88 <_vfiprintf_r+0x44>
 8003f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f9a:	f7ff feaf 	bl	8003cfc <__retarget_lock_release_recursive>
 8003f9e:	e7f3      	b.n	8003f88 <_vfiprintf_r+0x44>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fa4:	2320      	movs	r3, #32
 8003fa6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003faa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fae:	2330      	movs	r3, #48	@ 0x30
 8003fb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004160 <_vfiprintf_r+0x21c>
 8003fb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003fb8:	f04f 0901 	mov.w	r9, #1
 8003fbc:	4623      	mov	r3, r4
 8003fbe:	469a      	mov	sl, r3
 8003fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fc4:	b10a      	cbz	r2, 8003fca <_vfiprintf_r+0x86>
 8003fc6:	2a25      	cmp	r2, #37	@ 0x25
 8003fc8:	d1f9      	bne.n	8003fbe <_vfiprintf_r+0x7a>
 8003fca:	ebba 0b04 	subs.w	fp, sl, r4
 8003fce:	d00b      	beq.n	8003fe8 <_vfiprintf_r+0xa4>
 8003fd0:	465b      	mov	r3, fp
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	f7ff ffa1 	bl	8003f1e <__sfputs_r>
 8003fdc:	3001      	adds	r0, #1
 8003fde:	f000 80a7 	beq.w	8004130 <_vfiprintf_r+0x1ec>
 8003fe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fe4:	445a      	add	r2, fp
 8003fe6:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 809f 	beq.w	8004130 <_vfiprintf_r+0x1ec>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ffc:	f10a 0a01 	add.w	sl, sl, #1
 8004000:	9304      	str	r3, [sp, #16]
 8004002:	9307      	str	r3, [sp, #28]
 8004004:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004008:	931a      	str	r3, [sp, #104]	@ 0x68
 800400a:	4654      	mov	r4, sl
 800400c:	2205      	movs	r2, #5
 800400e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004012:	4853      	ldr	r0, [pc, #332]	@ (8004160 <_vfiprintf_r+0x21c>)
 8004014:	f7fc f8fc 	bl	8000210 <memchr>
 8004018:	9a04      	ldr	r2, [sp, #16]
 800401a:	b9d8      	cbnz	r0, 8004054 <_vfiprintf_r+0x110>
 800401c:	06d1      	lsls	r1, r2, #27
 800401e:	bf44      	itt	mi
 8004020:	2320      	movmi	r3, #32
 8004022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004026:	0713      	lsls	r3, r2, #28
 8004028:	bf44      	itt	mi
 800402a:	232b      	movmi	r3, #43	@ 0x2b
 800402c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004030:	f89a 3000 	ldrb.w	r3, [sl]
 8004034:	2b2a      	cmp	r3, #42	@ 0x2a
 8004036:	d015      	beq.n	8004064 <_vfiprintf_r+0x120>
 8004038:	9a07      	ldr	r2, [sp, #28]
 800403a:	4654      	mov	r4, sl
 800403c:	2000      	movs	r0, #0
 800403e:	f04f 0c0a 	mov.w	ip, #10
 8004042:	4621      	mov	r1, r4
 8004044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004048:	3b30      	subs	r3, #48	@ 0x30
 800404a:	2b09      	cmp	r3, #9
 800404c:	d94b      	bls.n	80040e6 <_vfiprintf_r+0x1a2>
 800404e:	b1b0      	cbz	r0, 800407e <_vfiprintf_r+0x13a>
 8004050:	9207      	str	r2, [sp, #28]
 8004052:	e014      	b.n	800407e <_vfiprintf_r+0x13a>
 8004054:	eba0 0308 	sub.w	r3, r0, r8
 8004058:	fa09 f303 	lsl.w	r3, r9, r3
 800405c:	4313      	orrs	r3, r2
 800405e:	9304      	str	r3, [sp, #16]
 8004060:	46a2      	mov	sl, r4
 8004062:	e7d2      	b.n	800400a <_vfiprintf_r+0xc6>
 8004064:	9b03      	ldr	r3, [sp, #12]
 8004066:	1d19      	adds	r1, r3, #4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	9103      	str	r1, [sp, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	bfbb      	ittet	lt
 8004070:	425b      	neglt	r3, r3
 8004072:	f042 0202 	orrlt.w	r2, r2, #2
 8004076:	9307      	strge	r3, [sp, #28]
 8004078:	9307      	strlt	r3, [sp, #28]
 800407a:	bfb8      	it	lt
 800407c:	9204      	strlt	r2, [sp, #16]
 800407e:	7823      	ldrb	r3, [r4, #0]
 8004080:	2b2e      	cmp	r3, #46	@ 0x2e
 8004082:	d10a      	bne.n	800409a <_vfiprintf_r+0x156>
 8004084:	7863      	ldrb	r3, [r4, #1]
 8004086:	2b2a      	cmp	r3, #42	@ 0x2a
 8004088:	d132      	bne.n	80040f0 <_vfiprintf_r+0x1ac>
 800408a:	9b03      	ldr	r3, [sp, #12]
 800408c:	1d1a      	adds	r2, r3, #4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	9203      	str	r2, [sp, #12]
 8004092:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004096:	3402      	adds	r4, #2
 8004098:	9305      	str	r3, [sp, #20]
 800409a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004170 <_vfiprintf_r+0x22c>
 800409e:	7821      	ldrb	r1, [r4, #0]
 80040a0:	2203      	movs	r2, #3
 80040a2:	4650      	mov	r0, sl
 80040a4:	f7fc f8b4 	bl	8000210 <memchr>
 80040a8:	b138      	cbz	r0, 80040ba <_vfiprintf_r+0x176>
 80040aa:	9b04      	ldr	r3, [sp, #16]
 80040ac:	eba0 000a 	sub.w	r0, r0, sl
 80040b0:	2240      	movs	r2, #64	@ 0x40
 80040b2:	4082      	lsls	r2, r0
 80040b4:	4313      	orrs	r3, r2
 80040b6:	3401      	adds	r4, #1
 80040b8:	9304      	str	r3, [sp, #16]
 80040ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040be:	4829      	ldr	r0, [pc, #164]	@ (8004164 <_vfiprintf_r+0x220>)
 80040c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040c4:	2206      	movs	r2, #6
 80040c6:	f7fc f8a3 	bl	8000210 <memchr>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d03f      	beq.n	800414e <_vfiprintf_r+0x20a>
 80040ce:	4b26      	ldr	r3, [pc, #152]	@ (8004168 <_vfiprintf_r+0x224>)
 80040d0:	bb1b      	cbnz	r3, 800411a <_vfiprintf_r+0x1d6>
 80040d2:	9b03      	ldr	r3, [sp, #12]
 80040d4:	3307      	adds	r3, #7
 80040d6:	f023 0307 	bic.w	r3, r3, #7
 80040da:	3308      	adds	r3, #8
 80040dc:	9303      	str	r3, [sp, #12]
 80040de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040e0:	443b      	add	r3, r7
 80040e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80040e4:	e76a      	b.n	8003fbc <_vfiprintf_r+0x78>
 80040e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80040ea:	460c      	mov	r4, r1
 80040ec:	2001      	movs	r0, #1
 80040ee:	e7a8      	b.n	8004042 <_vfiprintf_r+0xfe>
 80040f0:	2300      	movs	r3, #0
 80040f2:	3401      	adds	r4, #1
 80040f4:	9305      	str	r3, [sp, #20]
 80040f6:	4619      	mov	r1, r3
 80040f8:	f04f 0c0a 	mov.w	ip, #10
 80040fc:	4620      	mov	r0, r4
 80040fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004102:	3a30      	subs	r2, #48	@ 0x30
 8004104:	2a09      	cmp	r2, #9
 8004106:	d903      	bls.n	8004110 <_vfiprintf_r+0x1cc>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0c6      	beq.n	800409a <_vfiprintf_r+0x156>
 800410c:	9105      	str	r1, [sp, #20]
 800410e:	e7c4      	b.n	800409a <_vfiprintf_r+0x156>
 8004110:	fb0c 2101 	mla	r1, ip, r1, r2
 8004114:	4604      	mov	r4, r0
 8004116:	2301      	movs	r3, #1
 8004118:	e7f0      	b.n	80040fc <_vfiprintf_r+0x1b8>
 800411a:	ab03      	add	r3, sp, #12
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	462a      	mov	r2, r5
 8004120:	4b12      	ldr	r3, [pc, #72]	@ (800416c <_vfiprintf_r+0x228>)
 8004122:	a904      	add	r1, sp, #16
 8004124:	4630      	mov	r0, r6
 8004126:	f3af 8000 	nop.w
 800412a:	4607      	mov	r7, r0
 800412c:	1c78      	adds	r0, r7, #1
 800412e:	d1d6      	bne.n	80040de <_vfiprintf_r+0x19a>
 8004130:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004132:	07d9      	lsls	r1, r3, #31
 8004134:	d405      	bmi.n	8004142 <_vfiprintf_r+0x1fe>
 8004136:	89ab      	ldrh	r3, [r5, #12]
 8004138:	059a      	lsls	r2, r3, #22
 800413a:	d402      	bmi.n	8004142 <_vfiprintf_r+0x1fe>
 800413c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800413e:	f7ff fddd 	bl	8003cfc <__retarget_lock_release_recursive>
 8004142:	89ab      	ldrh	r3, [r5, #12]
 8004144:	065b      	lsls	r3, r3, #25
 8004146:	f53f af1f 	bmi.w	8003f88 <_vfiprintf_r+0x44>
 800414a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800414c:	e71e      	b.n	8003f8c <_vfiprintf_r+0x48>
 800414e:	ab03      	add	r3, sp, #12
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	462a      	mov	r2, r5
 8004154:	4b05      	ldr	r3, [pc, #20]	@ (800416c <_vfiprintf_r+0x228>)
 8004156:	a904      	add	r1, sp, #16
 8004158:	4630      	mov	r0, r6
 800415a:	f000 f879 	bl	8004250 <_printf_i>
 800415e:	e7e4      	b.n	800412a <_vfiprintf_r+0x1e6>
 8004160:	08004884 	.word	0x08004884
 8004164:	0800488e 	.word	0x0800488e
 8004168:	00000000 	.word	0x00000000
 800416c:	08003f1f 	.word	0x08003f1f
 8004170:	0800488a 	.word	0x0800488a

08004174 <_printf_common>:
 8004174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004178:	4616      	mov	r6, r2
 800417a:	4698      	mov	r8, r3
 800417c:	688a      	ldr	r2, [r1, #8]
 800417e:	690b      	ldr	r3, [r1, #16]
 8004180:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004184:	4293      	cmp	r3, r2
 8004186:	bfb8      	it	lt
 8004188:	4613      	movlt	r3, r2
 800418a:	6033      	str	r3, [r6, #0]
 800418c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004190:	4607      	mov	r7, r0
 8004192:	460c      	mov	r4, r1
 8004194:	b10a      	cbz	r2, 800419a <_printf_common+0x26>
 8004196:	3301      	adds	r3, #1
 8004198:	6033      	str	r3, [r6, #0]
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	0699      	lsls	r1, r3, #26
 800419e:	bf42      	ittt	mi
 80041a0:	6833      	ldrmi	r3, [r6, #0]
 80041a2:	3302      	addmi	r3, #2
 80041a4:	6033      	strmi	r3, [r6, #0]
 80041a6:	6825      	ldr	r5, [r4, #0]
 80041a8:	f015 0506 	ands.w	r5, r5, #6
 80041ac:	d106      	bne.n	80041bc <_printf_common+0x48>
 80041ae:	f104 0a19 	add.w	sl, r4, #25
 80041b2:	68e3      	ldr	r3, [r4, #12]
 80041b4:	6832      	ldr	r2, [r6, #0]
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	42ab      	cmp	r3, r5
 80041ba:	dc26      	bgt.n	800420a <_printf_common+0x96>
 80041bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041c0:	6822      	ldr	r2, [r4, #0]
 80041c2:	3b00      	subs	r3, #0
 80041c4:	bf18      	it	ne
 80041c6:	2301      	movne	r3, #1
 80041c8:	0692      	lsls	r2, r2, #26
 80041ca:	d42b      	bmi.n	8004224 <_printf_common+0xb0>
 80041cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041d0:	4641      	mov	r1, r8
 80041d2:	4638      	mov	r0, r7
 80041d4:	47c8      	blx	r9
 80041d6:	3001      	adds	r0, #1
 80041d8:	d01e      	beq.n	8004218 <_printf_common+0xa4>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	6922      	ldr	r2, [r4, #16]
 80041de:	f003 0306 	and.w	r3, r3, #6
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	bf02      	ittt	eq
 80041e6:	68e5      	ldreq	r5, [r4, #12]
 80041e8:	6833      	ldreq	r3, [r6, #0]
 80041ea:	1aed      	subeq	r5, r5, r3
 80041ec:	68a3      	ldr	r3, [r4, #8]
 80041ee:	bf0c      	ite	eq
 80041f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041f4:	2500      	movne	r5, #0
 80041f6:	4293      	cmp	r3, r2
 80041f8:	bfc4      	itt	gt
 80041fa:	1a9b      	subgt	r3, r3, r2
 80041fc:	18ed      	addgt	r5, r5, r3
 80041fe:	2600      	movs	r6, #0
 8004200:	341a      	adds	r4, #26
 8004202:	42b5      	cmp	r5, r6
 8004204:	d11a      	bne.n	800423c <_printf_common+0xc8>
 8004206:	2000      	movs	r0, #0
 8004208:	e008      	b.n	800421c <_printf_common+0xa8>
 800420a:	2301      	movs	r3, #1
 800420c:	4652      	mov	r2, sl
 800420e:	4641      	mov	r1, r8
 8004210:	4638      	mov	r0, r7
 8004212:	47c8      	blx	r9
 8004214:	3001      	adds	r0, #1
 8004216:	d103      	bne.n	8004220 <_printf_common+0xac>
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004220:	3501      	adds	r5, #1
 8004222:	e7c6      	b.n	80041b2 <_printf_common+0x3e>
 8004224:	18e1      	adds	r1, r4, r3
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	2030      	movs	r0, #48	@ 0x30
 800422a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800422e:	4422      	add	r2, r4
 8004230:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004234:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004238:	3302      	adds	r3, #2
 800423a:	e7c7      	b.n	80041cc <_printf_common+0x58>
 800423c:	2301      	movs	r3, #1
 800423e:	4622      	mov	r2, r4
 8004240:	4641      	mov	r1, r8
 8004242:	4638      	mov	r0, r7
 8004244:	47c8      	blx	r9
 8004246:	3001      	adds	r0, #1
 8004248:	d0e6      	beq.n	8004218 <_printf_common+0xa4>
 800424a:	3601      	adds	r6, #1
 800424c:	e7d9      	b.n	8004202 <_printf_common+0x8e>
	...

08004250 <_printf_i>:
 8004250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004254:	7e0f      	ldrb	r7, [r1, #24]
 8004256:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004258:	2f78      	cmp	r7, #120	@ 0x78
 800425a:	4691      	mov	r9, r2
 800425c:	4680      	mov	r8, r0
 800425e:	460c      	mov	r4, r1
 8004260:	469a      	mov	sl, r3
 8004262:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004266:	d807      	bhi.n	8004278 <_printf_i+0x28>
 8004268:	2f62      	cmp	r7, #98	@ 0x62
 800426a:	d80a      	bhi.n	8004282 <_printf_i+0x32>
 800426c:	2f00      	cmp	r7, #0
 800426e:	f000 80d1 	beq.w	8004414 <_printf_i+0x1c4>
 8004272:	2f58      	cmp	r7, #88	@ 0x58
 8004274:	f000 80b8 	beq.w	80043e8 <_printf_i+0x198>
 8004278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800427c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004280:	e03a      	b.n	80042f8 <_printf_i+0xa8>
 8004282:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004286:	2b15      	cmp	r3, #21
 8004288:	d8f6      	bhi.n	8004278 <_printf_i+0x28>
 800428a:	a101      	add	r1, pc, #4	@ (adr r1, 8004290 <_printf_i+0x40>)
 800428c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004290:	080042e9 	.word	0x080042e9
 8004294:	080042fd 	.word	0x080042fd
 8004298:	08004279 	.word	0x08004279
 800429c:	08004279 	.word	0x08004279
 80042a0:	08004279 	.word	0x08004279
 80042a4:	08004279 	.word	0x08004279
 80042a8:	080042fd 	.word	0x080042fd
 80042ac:	08004279 	.word	0x08004279
 80042b0:	08004279 	.word	0x08004279
 80042b4:	08004279 	.word	0x08004279
 80042b8:	08004279 	.word	0x08004279
 80042bc:	080043fb 	.word	0x080043fb
 80042c0:	08004327 	.word	0x08004327
 80042c4:	080043b5 	.word	0x080043b5
 80042c8:	08004279 	.word	0x08004279
 80042cc:	08004279 	.word	0x08004279
 80042d0:	0800441d 	.word	0x0800441d
 80042d4:	08004279 	.word	0x08004279
 80042d8:	08004327 	.word	0x08004327
 80042dc:	08004279 	.word	0x08004279
 80042e0:	08004279 	.word	0x08004279
 80042e4:	080043bd 	.word	0x080043bd
 80042e8:	6833      	ldr	r3, [r6, #0]
 80042ea:	1d1a      	adds	r2, r3, #4
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6032      	str	r2, [r6, #0]
 80042f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042f8:	2301      	movs	r3, #1
 80042fa:	e09c      	b.n	8004436 <_printf_i+0x1e6>
 80042fc:	6833      	ldr	r3, [r6, #0]
 80042fe:	6820      	ldr	r0, [r4, #0]
 8004300:	1d19      	adds	r1, r3, #4
 8004302:	6031      	str	r1, [r6, #0]
 8004304:	0606      	lsls	r6, r0, #24
 8004306:	d501      	bpl.n	800430c <_printf_i+0xbc>
 8004308:	681d      	ldr	r5, [r3, #0]
 800430a:	e003      	b.n	8004314 <_printf_i+0xc4>
 800430c:	0645      	lsls	r5, r0, #25
 800430e:	d5fb      	bpl.n	8004308 <_printf_i+0xb8>
 8004310:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004314:	2d00      	cmp	r5, #0
 8004316:	da03      	bge.n	8004320 <_printf_i+0xd0>
 8004318:	232d      	movs	r3, #45	@ 0x2d
 800431a:	426d      	negs	r5, r5
 800431c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004320:	4858      	ldr	r0, [pc, #352]	@ (8004484 <_printf_i+0x234>)
 8004322:	230a      	movs	r3, #10
 8004324:	e011      	b.n	800434a <_printf_i+0xfa>
 8004326:	6821      	ldr	r1, [r4, #0]
 8004328:	6833      	ldr	r3, [r6, #0]
 800432a:	0608      	lsls	r0, r1, #24
 800432c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004330:	d402      	bmi.n	8004338 <_printf_i+0xe8>
 8004332:	0649      	lsls	r1, r1, #25
 8004334:	bf48      	it	mi
 8004336:	b2ad      	uxthmi	r5, r5
 8004338:	2f6f      	cmp	r7, #111	@ 0x6f
 800433a:	4852      	ldr	r0, [pc, #328]	@ (8004484 <_printf_i+0x234>)
 800433c:	6033      	str	r3, [r6, #0]
 800433e:	bf14      	ite	ne
 8004340:	230a      	movne	r3, #10
 8004342:	2308      	moveq	r3, #8
 8004344:	2100      	movs	r1, #0
 8004346:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800434a:	6866      	ldr	r6, [r4, #4]
 800434c:	60a6      	str	r6, [r4, #8]
 800434e:	2e00      	cmp	r6, #0
 8004350:	db05      	blt.n	800435e <_printf_i+0x10e>
 8004352:	6821      	ldr	r1, [r4, #0]
 8004354:	432e      	orrs	r6, r5
 8004356:	f021 0104 	bic.w	r1, r1, #4
 800435a:	6021      	str	r1, [r4, #0]
 800435c:	d04b      	beq.n	80043f6 <_printf_i+0x1a6>
 800435e:	4616      	mov	r6, r2
 8004360:	fbb5 f1f3 	udiv	r1, r5, r3
 8004364:	fb03 5711 	mls	r7, r3, r1, r5
 8004368:	5dc7      	ldrb	r7, [r0, r7]
 800436a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800436e:	462f      	mov	r7, r5
 8004370:	42bb      	cmp	r3, r7
 8004372:	460d      	mov	r5, r1
 8004374:	d9f4      	bls.n	8004360 <_printf_i+0x110>
 8004376:	2b08      	cmp	r3, #8
 8004378:	d10b      	bne.n	8004392 <_printf_i+0x142>
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	07df      	lsls	r7, r3, #31
 800437e:	d508      	bpl.n	8004392 <_printf_i+0x142>
 8004380:	6923      	ldr	r3, [r4, #16]
 8004382:	6861      	ldr	r1, [r4, #4]
 8004384:	4299      	cmp	r1, r3
 8004386:	bfde      	ittt	le
 8004388:	2330      	movle	r3, #48	@ 0x30
 800438a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800438e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004392:	1b92      	subs	r2, r2, r6
 8004394:	6122      	str	r2, [r4, #16]
 8004396:	f8cd a000 	str.w	sl, [sp]
 800439a:	464b      	mov	r3, r9
 800439c:	aa03      	add	r2, sp, #12
 800439e:	4621      	mov	r1, r4
 80043a0:	4640      	mov	r0, r8
 80043a2:	f7ff fee7 	bl	8004174 <_printf_common>
 80043a6:	3001      	adds	r0, #1
 80043a8:	d14a      	bne.n	8004440 <_printf_i+0x1f0>
 80043aa:	f04f 30ff 	mov.w	r0, #4294967295
 80043ae:	b004      	add	sp, #16
 80043b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	f043 0320 	orr.w	r3, r3, #32
 80043ba:	6023      	str	r3, [r4, #0]
 80043bc:	4832      	ldr	r0, [pc, #200]	@ (8004488 <_printf_i+0x238>)
 80043be:	2778      	movs	r7, #120	@ 0x78
 80043c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	6831      	ldr	r1, [r6, #0]
 80043c8:	061f      	lsls	r7, r3, #24
 80043ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80043ce:	d402      	bmi.n	80043d6 <_printf_i+0x186>
 80043d0:	065f      	lsls	r7, r3, #25
 80043d2:	bf48      	it	mi
 80043d4:	b2ad      	uxthmi	r5, r5
 80043d6:	6031      	str	r1, [r6, #0]
 80043d8:	07d9      	lsls	r1, r3, #31
 80043da:	bf44      	itt	mi
 80043dc:	f043 0320 	orrmi.w	r3, r3, #32
 80043e0:	6023      	strmi	r3, [r4, #0]
 80043e2:	b11d      	cbz	r5, 80043ec <_printf_i+0x19c>
 80043e4:	2310      	movs	r3, #16
 80043e6:	e7ad      	b.n	8004344 <_printf_i+0xf4>
 80043e8:	4826      	ldr	r0, [pc, #152]	@ (8004484 <_printf_i+0x234>)
 80043ea:	e7e9      	b.n	80043c0 <_printf_i+0x170>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	f023 0320 	bic.w	r3, r3, #32
 80043f2:	6023      	str	r3, [r4, #0]
 80043f4:	e7f6      	b.n	80043e4 <_printf_i+0x194>
 80043f6:	4616      	mov	r6, r2
 80043f8:	e7bd      	b.n	8004376 <_printf_i+0x126>
 80043fa:	6833      	ldr	r3, [r6, #0]
 80043fc:	6825      	ldr	r5, [r4, #0]
 80043fe:	6961      	ldr	r1, [r4, #20]
 8004400:	1d18      	adds	r0, r3, #4
 8004402:	6030      	str	r0, [r6, #0]
 8004404:	062e      	lsls	r6, r5, #24
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	d501      	bpl.n	800440e <_printf_i+0x1be>
 800440a:	6019      	str	r1, [r3, #0]
 800440c:	e002      	b.n	8004414 <_printf_i+0x1c4>
 800440e:	0668      	lsls	r0, r5, #25
 8004410:	d5fb      	bpl.n	800440a <_printf_i+0x1ba>
 8004412:	8019      	strh	r1, [r3, #0]
 8004414:	2300      	movs	r3, #0
 8004416:	6123      	str	r3, [r4, #16]
 8004418:	4616      	mov	r6, r2
 800441a:	e7bc      	b.n	8004396 <_printf_i+0x146>
 800441c:	6833      	ldr	r3, [r6, #0]
 800441e:	1d1a      	adds	r2, r3, #4
 8004420:	6032      	str	r2, [r6, #0]
 8004422:	681e      	ldr	r6, [r3, #0]
 8004424:	6862      	ldr	r2, [r4, #4]
 8004426:	2100      	movs	r1, #0
 8004428:	4630      	mov	r0, r6
 800442a:	f7fb fef1 	bl	8000210 <memchr>
 800442e:	b108      	cbz	r0, 8004434 <_printf_i+0x1e4>
 8004430:	1b80      	subs	r0, r0, r6
 8004432:	6060      	str	r0, [r4, #4]
 8004434:	6863      	ldr	r3, [r4, #4]
 8004436:	6123      	str	r3, [r4, #16]
 8004438:	2300      	movs	r3, #0
 800443a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800443e:	e7aa      	b.n	8004396 <_printf_i+0x146>
 8004440:	6923      	ldr	r3, [r4, #16]
 8004442:	4632      	mov	r2, r6
 8004444:	4649      	mov	r1, r9
 8004446:	4640      	mov	r0, r8
 8004448:	47d0      	blx	sl
 800444a:	3001      	adds	r0, #1
 800444c:	d0ad      	beq.n	80043aa <_printf_i+0x15a>
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	079b      	lsls	r3, r3, #30
 8004452:	d413      	bmi.n	800447c <_printf_i+0x22c>
 8004454:	68e0      	ldr	r0, [r4, #12]
 8004456:	9b03      	ldr	r3, [sp, #12]
 8004458:	4298      	cmp	r0, r3
 800445a:	bfb8      	it	lt
 800445c:	4618      	movlt	r0, r3
 800445e:	e7a6      	b.n	80043ae <_printf_i+0x15e>
 8004460:	2301      	movs	r3, #1
 8004462:	4632      	mov	r2, r6
 8004464:	4649      	mov	r1, r9
 8004466:	4640      	mov	r0, r8
 8004468:	47d0      	blx	sl
 800446a:	3001      	adds	r0, #1
 800446c:	d09d      	beq.n	80043aa <_printf_i+0x15a>
 800446e:	3501      	adds	r5, #1
 8004470:	68e3      	ldr	r3, [r4, #12]
 8004472:	9903      	ldr	r1, [sp, #12]
 8004474:	1a5b      	subs	r3, r3, r1
 8004476:	42ab      	cmp	r3, r5
 8004478:	dcf2      	bgt.n	8004460 <_printf_i+0x210>
 800447a:	e7eb      	b.n	8004454 <_printf_i+0x204>
 800447c:	2500      	movs	r5, #0
 800447e:	f104 0619 	add.w	r6, r4, #25
 8004482:	e7f5      	b.n	8004470 <_printf_i+0x220>
 8004484:	08004895 	.word	0x08004895
 8004488:	080048a6 	.word	0x080048a6

0800448c <__sflush_r>:
 800448c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004494:	0716      	lsls	r6, r2, #28
 8004496:	4605      	mov	r5, r0
 8004498:	460c      	mov	r4, r1
 800449a:	d454      	bmi.n	8004546 <__sflush_r+0xba>
 800449c:	684b      	ldr	r3, [r1, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	dc02      	bgt.n	80044a8 <__sflush_r+0x1c>
 80044a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	dd48      	ble.n	800453a <__sflush_r+0xae>
 80044a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044aa:	2e00      	cmp	r6, #0
 80044ac:	d045      	beq.n	800453a <__sflush_r+0xae>
 80044ae:	2300      	movs	r3, #0
 80044b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80044b4:	682f      	ldr	r7, [r5, #0]
 80044b6:	6a21      	ldr	r1, [r4, #32]
 80044b8:	602b      	str	r3, [r5, #0]
 80044ba:	d030      	beq.n	800451e <__sflush_r+0x92>
 80044bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80044be:	89a3      	ldrh	r3, [r4, #12]
 80044c0:	0759      	lsls	r1, r3, #29
 80044c2:	d505      	bpl.n	80044d0 <__sflush_r+0x44>
 80044c4:	6863      	ldr	r3, [r4, #4]
 80044c6:	1ad2      	subs	r2, r2, r3
 80044c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80044ca:	b10b      	cbz	r3, 80044d0 <__sflush_r+0x44>
 80044cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044ce:	1ad2      	subs	r2, r2, r3
 80044d0:	2300      	movs	r3, #0
 80044d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044d4:	6a21      	ldr	r1, [r4, #32]
 80044d6:	4628      	mov	r0, r5
 80044d8:	47b0      	blx	r6
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	89a3      	ldrh	r3, [r4, #12]
 80044de:	d106      	bne.n	80044ee <__sflush_r+0x62>
 80044e0:	6829      	ldr	r1, [r5, #0]
 80044e2:	291d      	cmp	r1, #29
 80044e4:	d82b      	bhi.n	800453e <__sflush_r+0xb2>
 80044e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004590 <__sflush_r+0x104>)
 80044e8:	40ca      	lsrs	r2, r1
 80044ea:	07d6      	lsls	r6, r2, #31
 80044ec:	d527      	bpl.n	800453e <__sflush_r+0xb2>
 80044ee:	2200      	movs	r2, #0
 80044f0:	6062      	str	r2, [r4, #4]
 80044f2:	04d9      	lsls	r1, r3, #19
 80044f4:	6922      	ldr	r2, [r4, #16]
 80044f6:	6022      	str	r2, [r4, #0]
 80044f8:	d504      	bpl.n	8004504 <__sflush_r+0x78>
 80044fa:	1c42      	adds	r2, r0, #1
 80044fc:	d101      	bne.n	8004502 <__sflush_r+0x76>
 80044fe:	682b      	ldr	r3, [r5, #0]
 8004500:	b903      	cbnz	r3, 8004504 <__sflush_r+0x78>
 8004502:	6560      	str	r0, [r4, #84]	@ 0x54
 8004504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004506:	602f      	str	r7, [r5, #0]
 8004508:	b1b9      	cbz	r1, 800453a <__sflush_r+0xae>
 800450a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800450e:	4299      	cmp	r1, r3
 8004510:	d002      	beq.n	8004518 <__sflush_r+0x8c>
 8004512:	4628      	mov	r0, r5
 8004514:	f7ff fbf4 	bl	8003d00 <_free_r>
 8004518:	2300      	movs	r3, #0
 800451a:	6363      	str	r3, [r4, #52]	@ 0x34
 800451c:	e00d      	b.n	800453a <__sflush_r+0xae>
 800451e:	2301      	movs	r3, #1
 8004520:	4628      	mov	r0, r5
 8004522:	47b0      	blx	r6
 8004524:	4602      	mov	r2, r0
 8004526:	1c50      	adds	r0, r2, #1
 8004528:	d1c9      	bne.n	80044be <__sflush_r+0x32>
 800452a:	682b      	ldr	r3, [r5, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0c6      	beq.n	80044be <__sflush_r+0x32>
 8004530:	2b1d      	cmp	r3, #29
 8004532:	d001      	beq.n	8004538 <__sflush_r+0xac>
 8004534:	2b16      	cmp	r3, #22
 8004536:	d11e      	bne.n	8004576 <__sflush_r+0xea>
 8004538:	602f      	str	r7, [r5, #0]
 800453a:	2000      	movs	r0, #0
 800453c:	e022      	b.n	8004584 <__sflush_r+0xf8>
 800453e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004542:	b21b      	sxth	r3, r3
 8004544:	e01b      	b.n	800457e <__sflush_r+0xf2>
 8004546:	690f      	ldr	r7, [r1, #16]
 8004548:	2f00      	cmp	r7, #0
 800454a:	d0f6      	beq.n	800453a <__sflush_r+0xae>
 800454c:	0793      	lsls	r3, r2, #30
 800454e:	680e      	ldr	r6, [r1, #0]
 8004550:	bf08      	it	eq
 8004552:	694b      	ldreq	r3, [r1, #20]
 8004554:	600f      	str	r7, [r1, #0]
 8004556:	bf18      	it	ne
 8004558:	2300      	movne	r3, #0
 800455a:	eba6 0807 	sub.w	r8, r6, r7
 800455e:	608b      	str	r3, [r1, #8]
 8004560:	f1b8 0f00 	cmp.w	r8, #0
 8004564:	dde9      	ble.n	800453a <__sflush_r+0xae>
 8004566:	6a21      	ldr	r1, [r4, #32]
 8004568:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800456a:	4643      	mov	r3, r8
 800456c:	463a      	mov	r2, r7
 800456e:	4628      	mov	r0, r5
 8004570:	47b0      	blx	r6
 8004572:	2800      	cmp	r0, #0
 8004574:	dc08      	bgt.n	8004588 <__sflush_r+0xfc>
 8004576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800457a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800457e:	81a3      	strh	r3, [r4, #12]
 8004580:	f04f 30ff 	mov.w	r0, #4294967295
 8004584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004588:	4407      	add	r7, r0
 800458a:	eba8 0800 	sub.w	r8, r8, r0
 800458e:	e7e7      	b.n	8004560 <__sflush_r+0xd4>
 8004590:	20400001 	.word	0x20400001

08004594 <_fflush_r>:
 8004594:	b538      	push	{r3, r4, r5, lr}
 8004596:	690b      	ldr	r3, [r1, #16]
 8004598:	4605      	mov	r5, r0
 800459a:	460c      	mov	r4, r1
 800459c:	b913      	cbnz	r3, 80045a4 <_fflush_r+0x10>
 800459e:	2500      	movs	r5, #0
 80045a0:	4628      	mov	r0, r5
 80045a2:	bd38      	pop	{r3, r4, r5, pc}
 80045a4:	b118      	cbz	r0, 80045ae <_fflush_r+0x1a>
 80045a6:	6a03      	ldr	r3, [r0, #32]
 80045a8:	b90b      	cbnz	r3, 80045ae <_fflush_r+0x1a>
 80045aa:	f7ff faa1 	bl	8003af0 <__sinit>
 80045ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f3      	beq.n	800459e <_fflush_r+0xa>
 80045b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80045b8:	07d0      	lsls	r0, r2, #31
 80045ba:	d404      	bmi.n	80045c6 <_fflush_r+0x32>
 80045bc:	0599      	lsls	r1, r3, #22
 80045be:	d402      	bmi.n	80045c6 <_fflush_r+0x32>
 80045c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045c2:	f7ff fb9a 	bl	8003cfa <__retarget_lock_acquire_recursive>
 80045c6:	4628      	mov	r0, r5
 80045c8:	4621      	mov	r1, r4
 80045ca:	f7ff ff5f 	bl	800448c <__sflush_r>
 80045ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045d0:	07da      	lsls	r2, r3, #31
 80045d2:	4605      	mov	r5, r0
 80045d4:	d4e4      	bmi.n	80045a0 <_fflush_r+0xc>
 80045d6:	89a3      	ldrh	r3, [r4, #12]
 80045d8:	059b      	lsls	r3, r3, #22
 80045da:	d4e1      	bmi.n	80045a0 <_fflush_r+0xc>
 80045dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045de:	f7ff fb8d 	bl	8003cfc <__retarget_lock_release_recursive>
 80045e2:	e7dd      	b.n	80045a0 <_fflush_r+0xc>

080045e4 <__swbuf_r>:
 80045e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e6:	460e      	mov	r6, r1
 80045e8:	4614      	mov	r4, r2
 80045ea:	4605      	mov	r5, r0
 80045ec:	b118      	cbz	r0, 80045f6 <__swbuf_r+0x12>
 80045ee:	6a03      	ldr	r3, [r0, #32]
 80045f0:	b90b      	cbnz	r3, 80045f6 <__swbuf_r+0x12>
 80045f2:	f7ff fa7d 	bl	8003af0 <__sinit>
 80045f6:	69a3      	ldr	r3, [r4, #24]
 80045f8:	60a3      	str	r3, [r4, #8]
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	071a      	lsls	r2, r3, #28
 80045fe:	d501      	bpl.n	8004604 <__swbuf_r+0x20>
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	b943      	cbnz	r3, 8004616 <__swbuf_r+0x32>
 8004604:	4621      	mov	r1, r4
 8004606:	4628      	mov	r0, r5
 8004608:	f000 f82a 	bl	8004660 <__swsetup_r>
 800460c:	b118      	cbz	r0, 8004616 <__swbuf_r+0x32>
 800460e:	f04f 37ff 	mov.w	r7, #4294967295
 8004612:	4638      	mov	r0, r7
 8004614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	6922      	ldr	r2, [r4, #16]
 800461a:	1a98      	subs	r0, r3, r2
 800461c:	6963      	ldr	r3, [r4, #20]
 800461e:	b2f6      	uxtb	r6, r6
 8004620:	4283      	cmp	r3, r0
 8004622:	4637      	mov	r7, r6
 8004624:	dc05      	bgt.n	8004632 <__swbuf_r+0x4e>
 8004626:	4621      	mov	r1, r4
 8004628:	4628      	mov	r0, r5
 800462a:	f7ff ffb3 	bl	8004594 <_fflush_r>
 800462e:	2800      	cmp	r0, #0
 8004630:	d1ed      	bne.n	800460e <__swbuf_r+0x2a>
 8004632:	68a3      	ldr	r3, [r4, #8]
 8004634:	3b01      	subs	r3, #1
 8004636:	60a3      	str	r3, [r4, #8]
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	6022      	str	r2, [r4, #0]
 800463e:	701e      	strb	r6, [r3, #0]
 8004640:	6962      	ldr	r2, [r4, #20]
 8004642:	1c43      	adds	r3, r0, #1
 8004644:	429a      	cmp	r2, r3
 8004646:	d004      	beq.n	8004652 <__swbuf_r+0x6e>
 8004648:	89a3      	ldrh	r3, [r4, #12]
 800464a:	07db      	lsls	r3, r3, #31
 800464c:	d5e1      	bpl.n	8004612 <__swbuf_r+0x2e>
 800464e:	2e0a      	cmp	r6, #10
 8004650:	d1df      	bne.n	8004612 <__swbuf_r+0x2e>
 8004652:	4621      	mov	r1, r4
 8004654:	4628      	mov	r0, r5
 8004656:	f7ff ff9d 	bl	8004594 <_fflush_r>
 800465a:	2800      	cmp	r0, #0
 800465c:	d0d9      	beq.n	8004612 <__swbuf_r+0x2e>
 800465e:	e7d6      	b.n	800460e <__swbuf_r+0x2a>

08004660 <__swsetup_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4b29      	ldr	r3, [pc, #164]	@ (8004708 <__swsetup_r+0xa8>)
 8004664:	4605      	mov	r5, r0
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	460c      	mov	r4, r1
 800466a:	b118      	cbz	r0, 8004674 <__swsetup_r+0x14>
 800466c:	6a03      	ldr	r3, [r0, #32]
 800466e:	b90b      	cbnz	r3, 8004674 <__swsetup_r+0x14>
 8004670:	f7ff fa3e 	bl	8003af0 <__sinit>
 8004674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004678:	0719      	lsls	r1, r3, #28
 800467a:	d422      	bmi.n	80046c2 <__swsetup_r+0x62>
 800467c:	06da      	lsls	r2, r3, #27
 800467e:	d407      	bmi.n	8004690 <__swsetup_r+0x30>
 8004680:	2209      	movs	r2, #9
 8004682:	602a      	str	r2, [r5, #0]
 8004684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004688:	81a3      	strh	r3, [r4, #12]
 800468a:	f04f 30ff 	mov.w	r0, #4294967295
 800468e:	e033      	b.n	80046f8 <__swsetup_r+0x98>
 8004690:	0758      	lsls	r0, r3, #29
 8004692:	d512      	bpl.n	80046ba <__swsetup_r+0x5a>
 8004694:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004696:	b141      	cbz	r1, 80046aa <__swsetup_r+0x4a>
 8004698:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800469c:	4299      	cmp	r1, r3
 800469e:	d002      	beq.n	80046a6 <__swsetup_r+0x46>
 80046a0:	4628      	mov	r0, r5
 80046a2:	f7ff fb2d 	bl	8003d00 <_free_r>
 80046a6:	2300      	movs	r3, #0
 80046a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80046aa:	89a3      	ldrh	r3, [r4, #12]
 80046ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80046b0:	81a3      	strh	r3, [r4, #12]
 80046b2:	2300      	movs	r3, #0
 80046b4:	6063      	str	r3, [r4, #4]
 80046b6:	6923      	ldr	r3, [r4, #16]
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	f043 0308 	orr.w	r3, r3, #8
 80046c0:	81a3      	strh	r3, [r4, #12]
 80046c2:	6923      	ldr	r3, [r4, #16]
 80046c4:	b94b      	cbnz	r3, 80046da <__swsetup_r+0x7a>
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80046cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046d0:	d003      	beq.n	80046da <__swsetup_r+0x7a>
 80046d2:	4621      	mov	r1, r4
 80046d4:	4628      	mov	r0, r5
 80046d6:	f000 f84f 	bl	8004778 <__smakebuf_r>
 80046da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046de:	f013 0201 	ands.w	r2, r3, #1
 80046e2:	d00a      	beq.n	80046fa <__swsetup_r+0x9a>
 80046e4:	2200      	movs	r2, #0
 80046e6:	60a2      	str	r2, [r4, #8]
 80046e8:	6962      	ldr	r2, [r4, #20]
 80046ea:	4252      	negs	r2, r2
 80046ec:	61a2      	str	r2, [r4, #24]
 80046ee:	6922      	ldr	r2, [r4, #16]
 80046f0:	b942      	cbnz	r2, 8004704 <__swsetup_r+0xa4>
 80046f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80046f6:	d1c5      	bne.n	8004684 <__swsetup_r+0x24>
 80046f8:	bd38      	pop	{r3, r4, r5, pc}
 80046fa:	0799      	lsls	r1, r3, #30
 80046fc:	bf58      	it	pl
 80046fe:	6962      	ldrpl	r2, [r4, #20]
 8004700:	60a2      	str	r2, [r4, #8]
 8004702:	e7f4      	b.n	80046ee <__swsetup_r+0x8e>
 8004704:	2000      	movs	r0, #0
 8004706:	e7f7      	b.n	80046f8 <__swsetup_r+0x98>
 8004708:	2000001c 	.word	0x2000001c

0800470c <_sbrk_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4d06      	ldr	r5, [pc, #24]	@ (8004728 <_sbrk_r+0x1c>)
 8004710:	2300      	movs	r3, #0
 8004712:	4604      	mov	r4, r0
 8004714:	4608      	mov	r0, r1
 8004716:	602b      	str	r3, [r5, #0]
 8004718:	f7fc fc12 	bl	8000f40 <_sbrk>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d102      	bne.n	8004726 <_sbrk_r+0x1a>
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	b103      	cbz	r3, 8004726 <_sbrk_r+0x1a>
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	bd38      	pop	{r3, r4, r5, pc}
 8004728:	20000270 	.word	0x20000270

0800472c <__swhatbuf_r>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	460c      	mov	r4, r1
 8004730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004734:	2900      	cmp	r1, #0
 8004736:	b096      	sub	sp, #88	@ 0x58
 8004738:	4615      	mov	r5, r2
 800473a:	461e      	mov	r6, r3
 800473c:	da0d      	bge.n	800475a <__swhatbuf_r+0x2e>
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004744:	f04f 0100 	mov.w	r1, #0
 8004748:	bf14      	ite	ne
 800474a:	2340      	movne	r3, #64	@ 0x40
 800474c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004750:	2000      	movs	r0, #0
 8004752:	6031      	str	r1, [r6, #0]
 8004754:	602b      	str	r3, [r5, #0]
 8004756:	b016      	add	sp, #88	@ 0x58
 8004758:	bd70      	pop	{r4, r5, r6, pc}
 800475a:	466a      	mov	r2, sp
 800475c:	f000 f848 	bl	80047f0 <_fstat_r>
 8004760:	2800      	cmp	r0, #0
 8004762:	dbec      	blt.n	800473e <__swhatbuf_r+0x12>
 8004764:	9901      	ldr	r1, [sp, #4]
 8004766:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800476a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800476e:	4259      	negs	r1, r3
 8004770:	4159      	adcs	r1, r3
 8004772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004776:	e7eb      	b.n	8004750 <__swhatbuf_r+0x24>

08004778 <__smakebuf_r>:
 8004778:	898b      	ldrh	r3, [r1, #12]
 800477a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800477c:	079d      	lsls	r5, r3, #30
 800477e:	4606      	mov	r6, r0
 8004780:	460c      	mov	r4, r1
 8004782:	d507      	bpl.n	8004794 <__smakebuf_r+0x1c>
 8004784:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	6123      	str	r3, [r4, #16]
 800478c:	2301      	movs	r3, #1
 800478e:	6163      	str	r3, [r4, #20]
 8004790:	b003      	add	sp, #12
 8004792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004794:	ab01      	add	r3, sp, #4
 8004796:	466a      	mov	r2, sp
 8004798:	f7ff ffc8 	bl	800472c <__swhatbuf_r>
 800479c:	9f00      	ldr	r7, [sp, #0]
 800479e:	4605      	mov	r5, r0
 80047a0:	4639      	mov	r1, r7
 80047a2:	4630      	mov	r0, r6
 80047a4:	f7ff fb18 	bl	8003dd8 <_malloc_r>
 80047a8:	b948      	cbnz	r0, 80047be <__smakebuf_r+0x46>
 80047aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ae:	059a      	lsls	r2, r3, #22
 80047b0:	d4ee      	bmi.n	8004790 <__smakebuf_r+0x18>
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	f043 0302 	orr.w	r3, r3, #2
 80047ba:	81a3      	strh	r3, [r4, #12]
 80047bc:	e7e2      	b.n	8004784 <__smakebuf_r+0xc>
 80047be:	89a3      	ldrh	r3, [r4, #12]
 80047c0:	6020      	str	r0, [r4, #0]
 80047c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c6:	81a3      	strh	r3, [r4, #12]
 80047c8:	9b01      	ldr	r3, [sp, #4]
 80047ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80047ce:	b15b      	cbz	r3, 80047e8 <__smakebuf_r+0x70>
 80047d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047d4:	4630      	mov	r0, r6
 80047d6:	f000 f81d 	bl	8004814 <_isatty_r>
 80047da:	b128      	cbz	r0, 80047e8 <__smakebuf_r+0x70>
 80047dc:	89a3      	ldrh	r3, [r4, #12]
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	81a3      	strh	r3, [r4, #12]
 80047e8:	89a3      	ldrh	r3, [r4, #12]
 80047ea:	431d      	orrs	r5, r3
 80047ec:	81a5      	strh	r5, [r4, #12]
 80047ee:	e7cf      	b.n	8004790 <__smakebuf_r+0x18>

080047f0 <_fstat_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4d07      	ldr	r5, [pc, #28]	@ (8004810 <_fstat_r+0x20>)
 80047f4:	2300      	movs	r3, #0
 80047f6:	4604      	mov	r4, r0
 80047f8:	4608      	mov	r0, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	602b      	str	r3, [r5, #0]
 80047fe:	f7fc fb77 	bl	8000ef0 <_fstat>
 8004802:	1c43      	adds	r3, r0, #1
 8004804:	d102      	bne.n	800480c <_fstat_r+0x1c>
 8004806:	682b      	ldr	r3, [r5, #0]
 8004808:	b103      	cbz	r3, 800480c <_fstat_r+0x1c>
 800480a:	6023      	str	r3, [r4, #0]
 800480c:	bd38      	pop	{r3, r4, r5, pc}
 800480e:	bf00      	nop
 8004810:	20000270 	.word	0x20000270

08004814 <_isatty_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4d06      	ldr	r5, [pc, #24]	@ (8004830 <_isatty_r+0x1c>)
 8004818:	2300      	movs	r3, #0
 800481a:	4604      	mov	r4, r0
 800481c:	4608      	mov	r0, r1
 800481e:	602b      	str	r3, [r5, #0]
 8004820:	f7fc fb76 	bl	8000f10 <_isatty>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d102      	bne.n	800482e <_isatty_r+0x1a>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	b103      	cbz	r3, 800482e <_isatty_r+0x1a>
 800482c:	6023      	str	r3, [r4, #0]
 800482e:	bd38      	pop	{r3, r4, r5, pc}
 8004830:	20000270 	.word	0x20000270

08004834 <_init>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	bf00      	nop
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr

08004840 <_fini>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	bf00      	nop
 8004844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004846:	bc08      	pop	{r3}
 8004848:	469e      	mov	lr, r3
 800484a:	4770      	bx	lr
